Test: 'reparsing' (2/8)
      Serie: 'reparsing.basic': (15/15)
             
             'reparsing.basic.1': PASSED
                 expected: Any
                   result: Any
             'reparsing.basic.2': PASSED
                 expected: Empty
                   result: Empty
             'reparsing.basic.3': PASSED
                 expected: Int
                   result: Int
             'reparsing.basic.4': PASSED
                 expected: Bool
                   result: Bool
             'reparsing.basic.5': PASSED
                 expected: 42
                   result: 42
             'reparsing.basic.6': PASSED
                 expected: `true
                   result: `true
             'reparsing.basic.7': PASSED
                 expected: 'c'--'o'
                   result: 'c'--'o'
             'reparsing.basic.8': PASSED
                 expected: *--*
                   result: Int
             'reparsing.basic.9': PASSED
                 expected: *---13 | 4--*
                   result: -*---13 | 4--*
             'reparsing.basic.10': PASSED
                 expected: Int | Bool
                   result: Int | Bool
             'reparsing.basic.11': PASSED
                 expected: Any \ Bool
                   result: Any \ Bool
             'reparsing.basic.12': PASSED
                 expected: (Int | Bool) & ~Bool
                   result: Int
             'reparsing.basic.13': PASSED
                 expected: Bool \ `true
                   result: `false
             'reparsing.basic.14': PASSED
                 expected: Bool -> Char | Unit -> Int
                   result: Bool -> Unit | Char -> Int
             'reparsing.basic.15': PASSED
                 expected: Bool -> Char -> Int -> (Int & Bool)
                   result: Bool -> Char -> Int -> Empty
             
      
      Serie: 'reparsing.where': (4/6)
             
             'reparsing.where.1': PASSED
                 expected: X where X = (Any, X) | `nil
                   result: [Any*]
             'reparsing.where.2': PASSED
                 expected: X where X = (Int, X) | `nil
                   result: [Int*]
             'reparsing.where.3': PASSED
                 expected: (X, X) where X = (Int, X) | `nil
                   result: [[Int*]; Int*]
             'reparsing.where.4': PASSED
                 expected: X where X = (Y, X) | `nil and Y = (Int, Y) | `nil
                   result: [[Int*]*]
             'reparsing.where.5': FAILED
                 expected: (Int, X) | Bool
          where X = Y & Z
          and Y = X | Char
          and Z = (Bool, Z) | `nil
                   result: PARSING_ERROR : File "core/typ.ml", line 244, characters 2-8: Assertion failed


             'reparsing.where.6': FAILED
                 expected: (1, X) | 2
          where X = Y & Z
          and Y = X | 3
          and Z = (4, Z) | `nil
                   result: PARSING_ERROR : File "core/typ.ml", line 244, characters 2-8: Assertion failed


             
      
      Serie: 'reparsing.regexp': (7/7)
             
             'reparsing.regexp.1': PASSED
                 expected: [ Int ]
                   result: [Int]
             'reparsing.regexp.2': PASSED
                 expected: [ Any* ]
                   result: [Any*]
             'reparsing.regexp.3': PASSED
                 expected: [ Int* ]
                   result: [Int*]
             'reparsing.regexp.4': PASSED
                 expected: [ Int;Bool+;Int ]
                   result: [Int; Bool+; Int]
             'reparsing.regexp.5': PASSED
                 expected: [ Int | Bool | Char* ]
                   result: [(Int | Bool | Char+)?]
             'reparsing.regexp.6': PASSED
                 expected: [ [ Int* ]* ]
                   result: [([Int*]; [Int*]*)?]
             'reparsing.regexp.7': PASSED
                 expected: [
          Int;Int;Int
          | Int;Bool;Int;Int;Int
          | Int;Bool;Int;Bool*;Int;Int
        ]
                   result: [Int; (Bool; Int; Bool*)?; Int; Int]
             
      
      Serie: 'reparsing.types': (3/5)
             
             'reparsing.types.1': PASSED
                 expected: (Int, X) where X = [ Int; X ] | `nil
                   result: [Int; (Int; [(Int; X)?])?] where X = [(Int; X)?]
             'reparsing.types.2': PASSED
                 expected: [ Int; X ] where X = (Int, X) | `nil
                   result: [Int; [Int*]]
             'reparsing.types.3': PASSED
                 expected: [ 42* ; (X | Y?)+ ] where X = (Any, X) | `nil and Y = (Empty, Y) | `nil
                   result: [(42*; ([Any+] | `nil)*)?]
             'reparsing.types.4': FAILED
                 expected: X where X = [ Y ] | `nil
          and Y = X
                   result: PARSING_ERROR : File "core/typ.ml", line 244, characters 2-8: Assertion failed


             'reparsing.types.5': FAILED
                 expected: (X, X)
          where X = (X, Y) | `nil
          and Y = Y | (Y, Z) | `nil
          and Z = Int | X
                   result: PARSING_ERROR : File "core/typ.ml", line 244, characters 2-8: Assertion failed


             
      
      Serie: 'reparsing.basic_w_var': (7/9)
             
             'reparsing.basic_w_var.1': PASSED
                 expected: 'a
                   result: 'a
             'reparsing.basic_w_var.2': PASSED
                 expected: Any & 'a
                   result: 'a
             'reparsing.basic_w_var.3': PASSED
                 expected: Empty | 'a
                   result: 'a
             'reparsing.basic_w_var.4': PASSED
                 expected: (Int, 'a | 'b)
                   result: (Int, ('b | 'a))
             'reparsing.basic_w_var.5': PASSED
                 expected: Bool & 'a
                   result: 'a & Bool
             'reparsing.basic_w_var.6': PASSED
                 expected: Any \ 'a
                   result: ~'a
             'reparsing.basic_w_var.7': PASSED
                 expected: ('a | 'b) & ~'b
                   result: 'a & ~'b
             'reparsing.basic_w_var.8': FAILED
                 expected: 'a -> 'b -> 'c -> 'd
                   result: 'a -> 'b -> 'c -> 'd
             'reparsing.basic_w_var.9': FAILED
                 expected: 'a -> Unit
                   result: 'a -> Unit
             
      
      Serie: 'reparsing.where_w_var': (4/5)
             
             'reparsing.where_w_var.1': PASSED
                 expected: X where X = ('a, X) | `nil
                   result: ['a*]
             'reparsing.where_w_var.2': PASSED
                 expected: X where X = ('a, X) | ('b, X) | `nil
                   result: [('a & 'b | 'a & ~'b | 'b & ~'a)*]
             'reparsing.where_w_var.3': PASSED
                 expected: (X, X) where X = ('a, X) | `nil
                   result: [['a*]; 'a*]
             'reparsing.where_w_var.4': PASSED
                 expected: X where X = (Y, X) | `nil and Y = ('a, Y) | `nil
                   result: [['a*]*]
             'reparsing.where_w_var.5': FAILED
                 expected: ('a, X) | Bool
          where X = Y & Z
          and Y = X | 'b
          and Z = ('c, Z) | `nil
                   result: PARSING_ERROR : File "core/typ.ml", line 244, characters 2-8: Assertion failed


             
      
      Serie: 'reparsing.regexp_w_var': (4/6)
             
             'reparsing.regexp_w_var.1': PASSED
                 expected: [ 'a ]
                   result: ['a]
             'reparsing.regexp_w_var.2': PASSED
                 expected: [ 'a* ]
                   result: ['a*]
             'reparsing.regexp_w_var.3': FAILED
                 expected: ['a; 'b; 'b & ~'a*;
 ('a & ~'b | 'a & 'b; ('b & ~'a*; 'a & 'b)*; 'b & ~'a*; 'a & ~'b |
  'a & 'b; ('b & ~'a*; 'a & 'b)*)]
                   result: REPARSING_ERROR : Failure("Cannot mix cap and regular expression") 
 
                           [ 'a; ('b)+; 'a ] 
 VS 

 ['a; 'b; 'b & ~'a*;
 ('a & ~'b | 'a & 'b; ('b & ~'a*; 'a & 'b)*; 'b & ~'a*; 'a & ~'b |
  'a & 'b; ('b & ~'a*; 'a & 'b)*)]]


                'reparsing.regexp_w_var.4': PASSED
                    expected: [ 'a | 'b | 'c* ]
                      result: [('a & 'b & ~'c | 'b & ~'a & ~'c | 'a & ~'b & ~'c |
  ('a & 'c & ~'b | 'c & ~'a & ~'b | 'a & 'b & 'c | 'b & 'c & ~'a); 'c*)?]
                'reparsing.regexp_w_var.5': PASSED
                    expected: [ [ 'a* ]* ]
                      result: [(['a*]; ['a*]*)?]
                'reparsing.regexp_w_var.6': FAILED
                    expected: ['a; 'a & 'b; 'a |
 'a; ('a & 'b; 'a | ('b & ~'a; 'a | 'a & 'b; 'a; 'b & ~'a); 'b & ~'a*);
 'a & 'b; ('b & ~'a+; 'a & 'b)*; 'a & 'b;
 (('b & ~'a+; 'a & 'b; ('b & ~'a+; 'a & 'b)*)?; 'a & 'b)* |
 'a; ('a & 'b; 'a | ('b & ~'a; 'a | 'a & 'b; 'a; 'b & ~'a); 'b & ~'a*);
 'a & 'b; ('b & ~'a+; 'a & 'b)*;
 ('a & ~'b |
  'a & 'b; (('b & ~'a+; 'a & 'b; ('b & ~'a+; 'a & 'b)*)?; 'a & 'b)*;
  ('b & ~'a+; 'a & 'b; ('b & ~'a+; 'a & 'b)*)?; 'a & ~'b) |
 'a; 'a & ~'b; 'a | 'a; 'a & 'b; 'a; 'a & ~'b; 'a |
 'a; ('b & ~'a; 'a | 'a & 'b; 'a; 'b & ~'a); 'b & ~'a*; 'a & ~'b; 'a |
 'a; ('a & 'b; 'a | ('b & ~'a; 'a | 'a & 'b; 'a; 'b & ~'a); 'b & ~'a*);
 'a & 'b; ('b & ~'a+; 'a & 'b)*; 'b & ~'a+; 'a & ~'b; 'a |
 'a; ('a & 'b; 'a | ('b & ~'a; 'a | 'a & 'b; 'a; 'b & ~'a); 'b & ~'a*);
 'a & 'b; ('b & ~'a+; 'a & 'b)*; 'a & 'b;
 (('b & ~'a+; 'a & 'b; ('b & ~'a+; 'a & 'b)*)?; 'a & 'b)*; 'b & ~'a+;
 ('a & 'b; ('b & ~'a+; 'a & 'b)*; 'b & ~'a+)?; 'a & ~'b; 'a |
 'a; ('a & 'b; 'a | ('b & ~'a; 'a | 'a & 'b; 'a; 'b & ~'a); 'b & ~'a*);
 'a & 'b; ('b & ~'a+; 'a & 'b)*;
 ('a & ~'b |
  'a & 'b; (('b & ~'a+; 'a & 'b; ('b & ~'a+; 'a & 'b)*)?; 'a & 'b)*;
  ('b & ~'a+; 'a & 'b; ('b & ~'a+; 'a & 'b)*)?; 'a & ~'b);
 'a]
                      result: REPARSING_ERROR : Failure("Cannot mix cap and regular expression") 
 
                              [
          'a;'a;'a
          | 'a;'b;'a;'a;'a
          | 'a;'b;'a;('b)*;'a;'a
        ] 
 
                              VS 

 ['a; 'a & 'b; 'a |
 'a; ('a & 'b; 'a | ('b & ~'a; 'a | 'a & 'b; 'a; 'b & ~'a); 'b & ~'a*);
 'a & 'b; ('b & ~'a+; 'a & 'b)*; 'a & 'b;
 (('b & ~'a+; 'a & 'b; ('b & ~'a+; 'a & 'b)*)?; 'a & 'b)* |
 'a; ('a & 'b; 'a | ('b & ~'a; 'a | 'a & 'b; 'a; 'b & ~'a); 'b & ~'a*);
 'a & 'b; ('b & ~'a+; 'a & 'b)*;
 ('a & ~'b |
  'a & 'b; (('b & ~'a+; 'a & 'b; ('b & ~'a+; 'a & 'b)*)?; 'a & 'b)*;
  ('b & ~'a+; 'a & 'b; ('b & ~'a+; 'a & 'b)*)?; 'a & ~'b) |
 'a; 'a & ~'b; 'a | 'a; 'a & 'b; 'a; 'a & ~'b; 'a |
 'a; ('b & ~'a; 'a | 'a & 'b; 'a; 'b & ~'a); 'b & ~'a*; 'a & ~'b; 'a |
 'a; ('a & 'b; 'a | ('b & ~'a; 'a | 'a & 'b; 'a; 'b & ~'a); 'b & ~'a*);
 'a & 'b; ('b & ~'a+; 'a & 'b)*; 'b & ~'a+; 'a & ~'b; 'a |
 'a; ('a & 'b; 'a | ('b & ~'a; 'a | 'a & 'b; 'a; 'b & ~'a); 'b & ~'a*);
 'a & 'b; ('b & ~'a+; 'a & 'b)*; 'a & 'b;
 (('b & ~'a+; 'a & 'b; ('b & ~'a+; 'a & 'b)*)?; 'a & 'b)*; 'b & ~'a+;
 ('a & 'b; ('b & ~'a+; 'a & 'b)*; 'b & ~'a+)?; 'a & ~'b; 'a |
 'a; ('a & 'b; 'a | ('b & ~'a; 'a | 'a & 'b; 'a; 'b & ~'a); 'b & ~'a*);
 'a & 'b; ('b & ~'a+; 'a & 'b)*;
 ('a & ~'b |
  'a & 'b; (('b & ~'a+; 'a & 'b; ('b & ~'a+; 'a & 'b)*)?; 'a & 'b)*;
  ('b & ~'a+; 'a & 'b; ('b & ~'a+; 'a & 'b)*)?; 'a & ~'b);
 'a]]


                   
             
             Serie: 'reparsing.types_w_var': (2/5)
                    
                    'reparsing.types_w_var.1': PASSED
                        expected: ('a, X) where X = [ 'a; X ] | `nil
                          result: ['a; ('a; [('a; X)?])?] where X = [('a; X)?]
                    'reparsing.types_w_var.2': PASSED
                        expected: [ 'a; X ] where X = ('a, X) | `nil
                          result: ['a; ['a*]]
                    'reparsing.types_w_var.3': FAILED
                        expected: [(('a & ['b & 'c*; 'b & ~'c; 'b*] | 'a & ['b & 'c*; 'c & ~'b; 'c*] |
   'a & ['b & 'c*] |
   'a & Any \ [('b & 'c*; ('b & ~'c; 'b* | 'c & ~'b; 'c*)?)?])*;
  ((~'a & ['b & 'c*; 'b & ~'c; 'b*] | ~'a & ['b & 'c*; 'c & ~'b; 'c*] |
    ~'a & ['b & 'c*]);
   (['b & 'c*; 'c & ~'b; 'c*] | ['b & 'c*; 'b & ~'c; 'b*] | ['b & 'c*])*)?)?]
                          result: REPARSING_ERROR : Failure("Cannot mix cap and regular expression") 
 
                                  [ ('a)* ; (X | Y?)+ ]
          where X = ('b, X) | `nil
          and Y = ('c, Y) | `nil 
 
                                  VS 

 [(('a & ['b & 'c*; 'b & ~'c; 'b*] | 'a & ['b & 'c*; 'c & ~'b; 'c*] |
   'a & ['b & 'c*] |
   'a & Any \ [('b & 'c*; ('b & ~'c; 'b* | 'c & ~'b; 'c*)?)?])*;
  ((~'a & ['b & 'c*; 'b & ~'c; 'b*] | ~'a & ['b & 'c*; 'c & ~'b; 'c*] |
    ~'a & ['b & 'c*]);
   (['b & 'c*; 'c & ~'b; 'c*] | ['b & 'c*; 'b & ~'c; 'b*] | ['b & 'c*])*)?)?]]


                       'reparsing.types_w_var.4': FAILED
                           expected: X where X = [ X* ; X* ; ('a, 'a) ] | ('b, `nil)
                             result: PARSING_ERROR : File "core/typ.ml", line 244, characters 2-8: Assertion failed


                       'reparsing.types_w_var.5': FAILED
                           expected: (X, X)
          where X = (X, Y) | `nil
          and Y = Y | (Y, Z) | `nil
          and Z = 'a | X
                             result: PARSING_ERROR : File "core/typ.ml", line 244, characters 2-8: Assertion failed


                       
                    
             
      Test: 'two_syntax' (1/4)
            Serie: 'two_syntax.basic': (7/7)
                   
                   'two_syntax.basic.1': PASSED
                       expected: (Int, `nil) = [ Int ]
                         result: true
                   'two_syntax.basic.2': PASSED
                       expected: (42, `nil) = [ 42 ]
                         result: true
                   'two_syntax.basic.3': PASSED
                       expected: (Bool, (Int, `nil)) = [ Bool; Int ]
                         result: true
                   'two_syntax.basic.4': PASSED
                       expected: `nil = []
                         result: true
                   'two_syntax.basic.5': PASSED
                       expected: ((Int, `nil), Bool) = ([ Int ], Bool)
                         result: true
                   'two_syntax.basic.6': PASSED
                       expected: ((Int, `nil), Bool) != [ Int; Bool ]
                         result: true
                   'two_syntax.basic.7': PASSED
                       expected: (Int, Int) != [ Int; Int ]
                         result: true
                   
            
            Serie: 'two_syntax.rec': (3/4)
                   
                   'two_syntax.rec.1': PASSED
                       expected: X where X = (Int, X) | `nil = [ Int* ]
                         result: true
                   'two_syntax.rec.2': FAILED
                       expected: X where X = (Int, (Int, X)) | `nil = [ Int+ ]
                         result: false
                   'two_syntax.rec.3': PASSED
                       expected: X where X = (Int, X) | `nil != [ [ Int* ]* ]
                         result: true
                   'two_syntax.rec.4': PASSED
                       expected: X where X = ((Int, Int), X) | `nil != [ Int+ ]
                         result: true
                   
            
            Serie: 'two_syntax.basic_w_var': (2/5)
                   
                   'two_syntax.basic_w_var.1': FAILED
                       expected: ('a, `nil) = [ 'a ]
                         result: false
                   'two_syntax.basic_w_var.2': FAILED
                       expected: ('a, ('b, `nil)) = [ 'a; 'b ]
                         result: false
                   'two_syntax.basic_w_var.3': FAILED
                       expected: (('a, `nil), 'b) = ([ 'a ], 'b)
                         result: false
                   'two_syntax.basic_w_var.4': PASSED
                       expected: (('a, `nil), 'b) != [ 'a; 'b ]
                         result: true
                   'two_syntax.basic_w_var.5': PASSED
                       expected: ('a, 'a) != [ 'a; 'a ]
                         result: true
                   
            
            Serie: 'two_syntax.rec_w_var': (2/4)
                   
                   'two_syntax.rec_w_var.1': FAILED
                       expected: X where X = ('a, X) | `nil = [ 'a* ]
                         result: false
                   'two_syntax.rec_w_var.2': FAILED
                       expected: X where X = ('a, ('a, X)) | `nil = [ 'a+ ]
                         result: false
                   'two_syntax.rec_w_var.3': PASSED
                       expected: X where X = ('a, X) | `nil != [ [ 'a* ]* ]
                         result: true
                   'two_syntax.rec_w_var.4': PASSED
                       expected: X where X = (('a, 'a), X) | `nil != [ 'a+ ]
                         result: true
                   
            
            
      SUMMARY:
              Series: 3/12
              Tests: 60/78
              Failed tests:
                           - reparsing.where.5
                           - reparsing.where.6
                           - reparsing.types.4
                           - reparsing.types.5
                           - reparsing.basic_w_var.8
                           - reparsing.basic_w_var.9
                           - reparsing.where_w_var.5
                           - reparsing.regexp_w_var.3
                           - reparsing.regexp_w_var.6
                           - reparsing.types_w_var.3
                           - reparsing.types_w_var.4
                           - reparsing.types_w_var.5
                           - two_syntax.rec.2
                           - two_syntax.basic_w_var.1
                           - two_syntax.basic_w_var.2
                           - two_syntax.basic_w_var.3
                           - two_syntax.rec_w_var.1
                           - two_syntax.rec_w_var.2
                           
              
              
      