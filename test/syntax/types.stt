type digit = '0'--'9'
type letter = 'A'--'Z' | 'a'--'z'
type start_char = letter | '_'

type ident = [ start_char; (start_char | digit) * ]

type a = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_"
type c = a \ ident

type e = [ start_char+; ('0'--'4' | start_char)+ ; (('_'* | letter;letter;letter)?)+]

type d = e \ ident
#type u ('a) = (Int -> Int) \ (Int -> 'a)
#type t = Int -> Int
#type g ('b) = ((Int -> Int) | (Int -> 'b) \ (Int -> Int)) \ (Int -> 'b)
type s ('a, 'b) = ('a & (Int -> Int)) | (Int -> 'b)
#type u = t \ t
#type v = ((Int -> Int) & (Bool -> Bool)) \ ((Int -> Any)|(`true -> Any))


#type t = (Int -> Int) | (Char -> Char)
type h ('a) =
('a  & Int ) | ('a & Char) | ('a & Enum)| ('a & Unit) | ('a & (Any, Any))
| ('a & Arrow)

type p = ((Empty -> Any)\Arrow)