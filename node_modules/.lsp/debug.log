Hello - from /home/p9romain/Téléchargements/Dev/ST3/rls-linux/reason-language-server
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 1, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","languageId":"ocaml","version":0,"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":236,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":236,"character":30},"end":{"line":236,"character":30}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":5,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":5,"character":10},"end":{"line":5,"character":10}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/ast.ml","languageId":"ocaml","version":0,"text":"type absent = |\n\ntype  ('te, 'ident) decl =\n  { name :  'ident;\n    params : 'ident list;\n    expr : 'te }\n\nmodule Open = struct\n  type ('te, 'ident, 'var, 're, 'extra) typ = [\n    (* Basic types *)\n    | `Typ of Stt.Typ.t\n    (* Constructors *)\n    | `Pair of 'te * 'te\n    | `Arrow of 'te * 'te\n    (* Connectives *)\n    | `Cup of 'te list\n    | `Cap of 'te list\n    | `Diff of 'te * 'te\n    | `Neg of 'te\n    (* Polymorphic variable *)\n    | `Var of 'var\n    (* Regexp *)\n    | `Regexp of 're\n    (* Type nodes (instantiation and recursive types) *)\n    | `Node of ('te, 'ident) node ref\n    (* Extensions that are not used by the concrete syntax *)\n    | `Extra of 'extra\n  ]\n  and ('te, 'ident) node = [\n      `Inst of 'ident * 'te list\n    | `Rec of 'te * ('ident * 'te) list\n    | `From of 'ident *  ('ident * 'te list)\n    | `Expr of 'te\n  ]\n  and ('te, 're) re = [\n      `Re_epsilon\n    | `Re_typ of 'te\n    | `Re_star of 're\n    | `Re_alt of 're * 're\n    | `Re_concat of 're * 're\n  ]\n\n\n\nend\n\n\nmodule Located =\nstruct\n  type ident = Ident.t Loc.located\n  type typ = (typ, ident, ident, re, absent) Open.typ Loc.located\n  and node = (typ, ident) Open.node\n  and re = (typ, re) Open.re Loc.located\n  type nonrec decl = (typ, ident) decl\nend\n"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/ast.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.mli","languageId":"ocaml","version":0,"text":"val pp : Format.formatter -> Stt.Typ.t -> unit\n"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.mli"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.mli","languageId":"ocaml","version":0,"text":"val pp : Format.formatter -> Stt.Typ.t -> unit\n"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.mli"}}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":211,"character":76}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":211,"character":76},"end":{"line":211,"character":76}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":176,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":176,"character":0},"end":{"line":176,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":213,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":213,"character":28},"end":{"line":213,"character":31}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":213,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":213,"character":43},"end":{"line":213,"character":43}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":213,"character":28},"end":{"line":213,"character":31}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":213,"character":28},"end":{"line":213,"character":31}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 15, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pp_regexp/automaton.mli","languageId":"ocaml","version":0,"text":"module type S = sig\n\n  type lt\n  (** The letter type *)\n  type t\n  (** The automaton type *)\n\n  module R : Regexp.S\n  (** The regexp module *)\n  type regexp\n  (** The regexp type *)\n\n  val empty : t\n  (** The empty automaton *)\n  val create : lt list -> t\n  (** [create alphabet] creates an empty automaton with the given alphabet [alphabet] *)\n\n  val add_state : t -> int -> t\n  (** [add_state automaton state] adds [state] in [automaton]. \n     If it's already a state in [automaton], does nothing *)\n  val add_states : t -> int list -> t\n  (** [add_states automaton states] adds several states in [automaton] *)\n  val add_trans : t -> int -> lt -> int -> t\n  (** [add_trans automaton state1 letter state2] adds a transition labelled [letter] between [state1] and [state2] in [automaton].\n\n     Raises : [state1] and [state2] must be [automaton]'s states.\n     Raises : [l] must be in the [automaton]'s alphabet.\n\n     If the transition is already in [automaton], does nothing *)\n  val add_transitions : t -> (int * lt * int) list -> t\n  (** [add_transitions automaton transitions] adds several transitions in [automaton] *)\n  val add_start : t -> int -> t\n  (** [add_start automaton state] sets [state] as a start state in [automaton].\n     If it's already the case, does nothing\n\n     Raise : [state] must be an [automaton]'s state *)\n  val add_starts : t -> int list -> t\n  (** [add_starts automaton states] sets several states as start states in [automaton] *)\n  val add_end : t -> int -> t\n  (** [add_end automaton state] sets [state] as an end state in [automaton].\n     If it's already the case, does nothing\n\n     Raise : [state] must be an [automaton]'s state *)\n  val add_ends : t -> int list -> t\n  (** [add_ends automaton states] sets several states as end states in [automaton] *)\n\n  val remove_state : t -> int -> t\n  (** [remove_state automaton state] removes [state] from [automaton]'s states.\n     If it isn't an [automaton]'s states, does nothing *)\n  val remove_states : t -> int list -> t\n  (** [remove_states automaton states] removes several states in [automaton] *)\n  val remove_trans : t -> int -> lt -> int -> t\n  (** [remove_trans automaton state1 letter state2] removes the given transitions from [automaton]'s transitions.\n     If it isn't an [automaton]'s transitions, does nothing *)\n  val remove_all_trans_between : t -> int -> int -> t\n  (** [remove_all_trans_between automaton state1 state2] removes all transitions between [state1] and [state2] in [automaton] *)\n  val remove_start : t -> int -> t\n  (** [remove_start automaton state] unsets [state] as a start state in [automaton].\n     If it's already the case, does nothing *)\n  val remove_starts : t -> int list -> t\n  (** [remove_starts automaton states] unsets several states as start state in [automaton] *)\n  val remove_end : t -> int -> t\n  (** [remove_end automaton state] unsets [state] as an end state in [automaton].\n     If it's already the case, does nothing *)\n  val remove_ends : t -> int list -> t\n  (** [remove_ends automaton states] unsets several states as end state in [automaton] *)\n\n  val to_dot : t -> string -> unit\n  (** [to_dot automaton file_name] creates a dot file named \"[file_name].dot\" representing [automaton] *)\n\n  val is_deterministic : t -> bool\n  (** [is_deterministic automaton] checks if [automaton] is deterministic.\n\n     A deterministic finite automaton (or DFA) follows these 3 rules :\n     - Has one start state ;\n     - Has no epsilon-transitions ;\n     - For all states, there exists one and only one transition labelled by a same letter from it.\n        For instance, if we have (1, \"a\", 2) and (1, \"a\", 3), then it isn't deterministic *)\n\n  val determinize : t -> t\n  (** [determinize automaton] returns an automaton which is the DFA version of [automaton].\n     If [automaton] has n states, the DFA automaton has at most 2^n states.\n\n     A deterministic finite automaton (or DFA) follows these 3 rules :\n     - Has one start state ;\n     - Has no epsilon-transitions ;\n     - For all states, there exists one and only one transition labelled by a same letter from it.\n        For instance, if we have (1, \"a\", 2) and (1, \"a\", 3), then it isn't deterministic *)\n  (* val get_rid_of_unreachable_states : t -> t *)\n  (** [get_rid_of_unreachable_states automaton] returns [automaton] without unreachable states *)\n  (* val minimize : t -> t *)\n  (** [minimize automaton] returns a minimized version of [automaton], the smallest possible \n\n     [automaton] must be a DFA without unreachable states *)\n\n  val check_word : t -> lt list -> bool\n  (** [check_word automaton word] checks if [word] is recognized by [automaton] *)\n  val to_regex_my : t -> regexp\n  (** [to_regex_my automaton] returns the regex representing [automaton] using the McNaughton-Yamada method. \n     The returned value might be unsimplified *)\n  (* val to_regex_bm : t -> regexp *)\n  (** [to_regex_bm automaton] returns the regex representing [automaton] using the Brzozowski-McCluskey method,\n      also know as the \"state elimination method\". \n     The returned value might be unsimplified *)\n  (* val from_regex : regexp -> lt list -> t *)\n  (** [from_regex reg alphabet] creates a NFA (Non-deterministic Finite Automaton) recognizing [reg] *)\n\nend\n\nmodule Make (Lt : Letter.Letter) : S with type lt = Lt.t \n                                      and module R = Regexp.Make(Lt) \n                                      and type regexp = Regexp.Make(Lt).t_simp"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pp_regexp/automaton.mli"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pp_regexp/parser.mli","languageId":"ocaml","version":0,"text":"module S : Letter.Letter with type symbol = string \n                          and type t = string\n(** the Letter module : just a string type *)\n\nmodule A : Automaton.S with type lt = S.t\n                       and module R = Regexp.Make(S) \n                       and type regexp = Regexp.Make(S).t_simp\n(** the Automaton module *)\n\nval parse_file : string -> string * A.t\n(** [parse_file file_name] parses the file named [file_name] to create the corresponding automaton.\n\n    The file should looks like this, otherwise it will raise an exception.\n    This is an example:\n\n    (a|b)*bb\n    6\n    4,5\n    0,a,0\n    0,b,0\n    ...\n *)"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pp_regexp/parser.mli"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pp_regexp/parser.mli"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/core/base/cartesian.mli","languageId":"ocaml","version":0,"text":"module Make (X1 : Sigs.Set) (X2 : Sigs.Set ) : sig\n\n  type simple = (X1.t * X2. t) list Seq.t\n  (** The type of a simple product decomposition which represents\n      an arbitrary union of union of products.*)\n\n  type normal = (X1.t * X2.t) list\n  (** The type of a normalized product decomposition which\n      represent a union of products that are pairwise disjoints on their first component.\n  *)\n\n  type dnf = ((X1.t * X2.t) list * (X1.t * X2.t) list) Seq.t\n  (** The type of a DNF of products, which is a union of intersections\n      of positive products and negative products.\n  *)\n\n  val simple : dnf -> simple\n  (** [simple dnf] simplifies a DNF of products into a union of products,\n      eliminating the negative parts.\n  *)\n\n  val normal : dnf -> normal\n  (* [normal dnf] normalizes a DNF of products into a union of products\n     disjoints on their first component.\n  *)\nend\n"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/core
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/core
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/core/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/core
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/core
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/core/base/cartesian.ml","languageId":"ocaml","version":0,"text":"module Make (X1 : Sigs.Set) (X2 : Sigs.Set) =\nstruct\n  type simple = (X1.t * X2.t) list Seq.t\n  type normal = (X1.t * X2.t) list\n  type dnf = ((X1.t * X2.t) list * (X1.t * X2.t) list) Seq.t\n\n  (*\n    Eliminate negation by doing :\n    (S1xS2)∖(T1xT2) = (S1x(S2\\T2)) U ((S\\T1)xS2)\n    to remove a single product from S1xS2\n    This yield two positive products (at most)\n    (R U S)\\ T = (R \\ T) U (S \\ T)\n\n  *)\n\n  let rec single_diff s1 s2 neg acc =\n    match neg with\n      [] -> (s1, s2)::acc\n    | (t1, t2) :: nneg ->\n      let d1 = X1.diff s1 t1 in\n      let empty_d1 = X1.is_empty d1 in\n      let d2 = X2.diff s2 t2 in\n      let empty_d2 = X2.is_empty d2 in\n      if empty_d1 && empty_d2 then acc\n      else if empty_d1 then single_diff s1 d2 nneg acc\n      else if empty_d2 then single_diff d1 s2 nneg acc\n      else\n        single_diff d1 s2 nneg (single_diff s1 d2 nneg acc)\n\n  let rec cap_l any1 any2 l =\n    match l with\n      [] -> (any1, any2)\n    | (x1, x2) :: ll ->\n      cap_l (X1.cap any1 x1) (X2.cap any2 x2) ll\n\n  let rec simple dnf =\n    match dnf () with\n      Seq.Nil -> (fun () -> Seq.Nil)\n    | Seq.Cons((pos, neg), ss) ->\n      fun () ->\n        let s1, s2 = cap_l X1.any X2.any pos in\n        if X1.is_empty s1 || X2.is_empty s2 then simple ss ()\n        else\n          match single_diff s1 s2 neg [] with\n            [] -> simple ss ()\n          | l -> Seq.Cons (l, fun () -> simple ss ())\n\n  let rec single_disj a1 a2 l acc =\n    match l with\n      [] -> (a1, a2)::acc\n    | ((b1,b2) as b) :: ll ->\n      let x = X1.cap a1 b1 in\n      if X1.is_empty x then\n        single_disj a1 a2 ll (b :: acc)\n      else\n        let a1' = X1.diff a1 b1 in\n        let b1' = X1.diff b1 a1 in\n        let empty_a1' = X1.is_empty a1' in\n        let empty_b1' = X1.is_empty b1' in\n        if empty_a1' && empty_b1' then\n          (* a1 = b1 *)\n          single_disj a1 (X2.cup a2 b2) ll acc\n        else\n        if empty_a1' then\n          (b1', b2)::(x, X2.cup a2 b2)::(List.rev_append ll acc)\n        else\n          single_disj a1' a2 ll (\n            if empty_b1' then ((x, X2.cup a2 b2)::acc)\n            else ((b1', b2)::(x, X2.cup a2 b2)::acc))\n\n  let normal dnf =\n    dnf\n    |> simple\n    |> Seq.flat_map List.to_seq\n    |> Seq.fold_left (fun acc (s1, s2) -> single_disj s1 s2 acc []) []\n\nend"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/core
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/core
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/core/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/core
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/core
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/core/base/cartesian.mli"}}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/core/base/cartesian.ml"},"position":{"line":11,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0169277191162ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/core
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/core
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/core/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/core/base/cartesian.ml"},"range":{"start":{"line":11,"character":6},"end":{"line":11,"character":34}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/core
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/core
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/core/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/core/base/cartesian.ml"},"position":{"line":12,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/core
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/core
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/core/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/core/base/cartesian.ml"},"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/core
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/core
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/core/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/core/base/cartesian.ml"},"position":{"line":8,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0259876251221ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/core
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/core
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/core/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/core/base/cartesian.ml"},"range":{"start":{"line":8,"character":41},"end":{"line":8,"character":41}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/core
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/core
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 22, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/core/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/core/base/cartesian.ml"},"position":{"line":9,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/core
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/core
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/core/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/core/base/cartesian.ml"},"range":{"start":{"line":9,"character":41},"end":{"line":9,"character":41}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/core
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/core
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/core/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/core/base/cartesian.ml"},"position":{"line":58,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/core
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/core
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 25, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/core/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/core/base/cartesian.ml"},"range":{"start":{"line":58,"character":23},"end":{"line":58,"character":23}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/core
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/core
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/core/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":213,"character":28},"end":{"line":213,"character":31}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 27, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/core/base/cartesian.ml"}}}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":213,"character":28},"end":{"line":213,"character":31}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 28, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":213,"character":28},"end":{"line":213,"character":31}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 29, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":213,"character":28},"end":{"line":213,"character":31}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 30, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":237,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 31, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":237,"character":46},"end":{"line":237,"character":46}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 32, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":1},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in*\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":237,"character":47}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 33, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":33}}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":237,"character":47}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 34, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":237,"character":47}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 35, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":2},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":237,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 36, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":4},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    \n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":238,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 37, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":7},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n\n    \n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":11},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n\n  in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":0}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 38, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":38}}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":4}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 39, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 40, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":14},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n\n    incrin\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":238,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 41, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":238,"character":0},"end":{"line":238,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 42, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":239,"character":8},"end":{"line":239,"character":8}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 44, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 45, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":239,"character":4},"end":{"line":239,"character":8}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 46, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":17},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n\n  in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 47, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":18},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":19},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":238,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 48, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":22},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":49,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":238,"character":5}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 49, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":49}}
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":238,"character":7}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 50, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":50}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":24},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let a\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":238,"character":8}}}
[server] Got a method textDocument/completion
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 51, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":51}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":27},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":52,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":238,"character":12}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 52, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":28},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":53,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":238,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 53, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":31},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":54,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 54, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":34},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":55,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":7}}}
[server] Got a method textDocument/completion
[server] processing took 0.0178813934326ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 55, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":55}}
Read message 
{"jsonrpc":"2.0","id":56,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 56, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":56}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":35},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":57,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":10}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 57, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":58,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 58, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":36},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let t\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":59,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":11}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 59, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":37},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":60,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 60, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":38},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":61,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":13}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 61, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":39},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp =\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":62,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 62, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":40},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":63,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":15}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 63, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":64,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 64, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":43},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":65,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":16}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 65, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":65}}
Read message 
{"jsonrpc":"2.0","id":66,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":16}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 66, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":44},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Type\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":67,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":19}}}
[server] Got a method textDocument/completion
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 67, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":67}}
Read message 
{"jsonrpc":"2.0","id":68,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":19}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 68, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":45},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Type.\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":69,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":20}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 69, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":69}}
Read message 
{"jsonrpc":"2.0","id":70,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":20}}}
[server] Got a method textDocument/completion
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 70, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":71,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 71, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":47},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":72,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 72, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":48},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ/\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":73,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":19}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 73, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":73}}
Read message 
{"jsonrpc":"2.0","id":74,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":19}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 74, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":75,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 75, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":51},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.c\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":76,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":19}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 76, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":76}}
Read message 
{"jsonrpc":"2.0","id":77,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":20}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 77, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":52},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.ca\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":78,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 78, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":54},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.ca^p\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":79,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":23}}}
[server] Got a method textDocument/completion
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 79, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":79}}
Read message 
{"jsonrpc":"2.0","id":80,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":23}}}
[server] Got a method textDocument/completion
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 80, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":80}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":55},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.ca^p \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":81,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":24}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 81, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":81}}
Read message 
{"jsonrpc":"2.0","id":82,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":24}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 82, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":83,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 83, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":82}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":61},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":84,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":22}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 84, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":84}}
Read message 
{"jsonrpc":"2.0","id":85,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":22}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 85, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":85}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":62},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":86,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":23}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 86, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":86}}
Read message 
{"jsonrpc":"2.0","id":87,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":23}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 87, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":63},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":88,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 88, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":89,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":24}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 89, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":89}}
Read message 
{"jsonrpc":"2.0","id":90,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":24}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 90, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":90}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":64},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":91,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":25}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 91, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":91}}
Read message 
{"jsonrpc":"2.0","id":92,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":25}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 92, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":66},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":93,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 93, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":94,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":27}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 94, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":94}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":67},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":95,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":28}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 95, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":96,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 96, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":68},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ T\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":97,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 97, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":70},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":98,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":31}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 98, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":98}}
Read message 
{"jsonrpc":"2.0","id":99,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":31}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 99, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":71},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":100,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":32}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 100, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":100}}
Read message 
{"jsonrpc":"2.0","id":101,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":32}}}
[server] Got a method textDocument/completion
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 101, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":102,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 102, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":72},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":103,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 103, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":73},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":104,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":40}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 104, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":104}}
Read message 
{"jsonrpc":"2.0","id":105,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":40}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 105, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":74},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product ()\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":106,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":41},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 106, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":75},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (T)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":107,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":42}}}
[server] Got a method textDocument/completion
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 107, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":107}}
Read message 
{"jsonrpc":"2.0","id":108,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":42}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 108, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":109,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 109, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":78},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (Tyyp)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":110,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":44}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 110, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":111,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":45}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 111, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":79},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (Tyyp.)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":112,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":46}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 112, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":113,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 113, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":83},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (Typ)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":114,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":44}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 114, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":85},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (Typ.n)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":115,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 115, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":116,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":46}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 116, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":116}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":86},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (Typ.)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":117,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":45}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 117, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":88},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (Typ.an)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":118,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":47}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 118, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":90},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (Typ.)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":119,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 119, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":91},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (Typ.a)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":120,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 120, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":93},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (Typ)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":121,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 121, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":94},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (Typ.)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":122,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":45}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 122, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":122}}
Read message 
{"jsonrpc":"2.0","id":123,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":45}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 123, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":124,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 124, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":95},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (Typ.a)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":125,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 125, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":96},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (Typ.)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":126,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0169277191162ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 126, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":98},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (Typ.no)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":127,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":47}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.028133392334ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 127, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":100},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (Typ.node)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":128,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 128, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":101},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.cap t @@ Typ.product (Typ.node )\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":129,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":50}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 129, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":129}}
Read message 
{"jsonrpc":"2.0","id":130,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":50}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 130, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":131,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":50}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 131, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":132,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 132, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":133,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":239,"character":19},"end":{"line":239,"character":19}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 133, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":102},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ Typ.product (Typ.node )\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":134,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":20},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 134, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":135,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 45.7539558411ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 135, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":136,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 136, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":137,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":239,"character":29},"end":{"line":239,"character":32}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 137, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":103},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ .product (Typ.node )\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":138,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 138, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":104},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ .product (.node )\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":139,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":39},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 139, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":140,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 140, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":141,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 141, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":142,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":239,"character":30},"end":{"line":239,"character":30}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 142, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":105},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (.node )\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":143,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 143, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":106},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node )\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":144,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":38},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 144, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":145,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 145, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":146,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 146, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":147,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":239,"character":43},"end":{"line":239,"character":43}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 147, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":108},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node an)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":148,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":44}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 148, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":148}}
Read message 
{"jsonrpc":"2.0","id":149,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":44}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 149, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":109},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":150,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 150, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":151,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":47}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 151, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":152,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":239,"character":47},"end":{"line":239,"character":47}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 152, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":110},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":153,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":48}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 153, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":153}}
Read message 
{"jsonrpc":"2.0","id":154,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":48}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 154, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":155,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":48}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 155, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":113},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) @@ \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":156,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":51}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 156, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":156}}
Read message 
{"jsonrpc":"2.0","id":157,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":51}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 157, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":158,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":51}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 158, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":115},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) @@ no\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":159,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":53}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 159, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":159}}
Read message 
{"jsonrpc":"2.0","id":160,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":53}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 160, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":161,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":53}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 161, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":117},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) @@ \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":162,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":51}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 162, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":121},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) ()\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":163,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":49},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 163, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":164,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 164, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":165,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 165, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":125},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":166,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":51}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 166, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":166}}
Read message 
{"jsonrpc":"2.0","id":167,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":51}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 167, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":168,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":53}}}
[server] Got a method textDocument/completion
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 168, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":168}}
Read message 
{"jsonrpc":"2.0","id":169,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":53}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 169, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":169}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":127},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node a)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":170,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":54}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 170, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":170}}
Read message 
{"jsonrpc":"2.0","id":171,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":54}}}
[server] Got a method textDocument/completion
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 171, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":128},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node an)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":172,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":56}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 172, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":173,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":56}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 173, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":173}}
Read message 
{"jsonrpc":"2.0","id":174,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":56}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 174, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":129},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":175,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":57}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 175, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":176,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":58}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 176, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":177,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":239,"character":58},"end":{"line":239,"character":58}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 177, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":130},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any))\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":178,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":59}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 178, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":178}}
Read message 
{"jsonrpc":"2.0","id":179,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":59}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 179, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":180,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":59}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 180, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":179}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":131},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":181,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":60}}}
[server] Got a method textDocument/completion
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 181, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":181}}
Read message 
{"jsonrpc":"2.0","id":182,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":60}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 182, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":133},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":183,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":62}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 183, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":184,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":239,"character":62}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 184, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":184}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":135},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":185,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":6}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 185, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":186,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 186, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":138},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":187,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 187, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":187}}
Read message 
{"jsonrpc":"2.0","id":188,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 188, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":189,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 189, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":139},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if T\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":190,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 190, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":141},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":191,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":11}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 191, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":191}}
Read message 
{"jsonrpc":"2.0","id":192,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":12}}}
[server] Got a method textDocument/completion
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 192, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":142},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":193,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 193, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":194,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":13}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 194, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":194}}
Read message 
{"jsonrpc":"2.0","id":195,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":13}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 195, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":143},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.e\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":196,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 196, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":144},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.eq\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":197,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 197, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":146},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.equiv\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":198,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 198, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":147},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.equiv \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":199,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":19}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 199, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":199}}
Read message 
{"jsonrpc":"2.0","id":200,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":19}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 200, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":149},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.equiv tp\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":201,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 201, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":202,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":21}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 202, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":202}}
Read message 
{"jsonrpc":"2.0","id":203,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":21}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 203, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":203}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":150},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.equiv tp \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":204,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":22}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 204, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":204}}
Read message 
{"jsonrpc":"2.0","id":205,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":22}}}
[server] Got a method textDocument/completion
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 205, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":206,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 206, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":207,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 207, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":208,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":13},"end":{"line":240,"character":13}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 208, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":151},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":209,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":14},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 209, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":210,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 210, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":211,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":22},"end":{"line":240,"character":22}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 211, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":153},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp a \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":212,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":23}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 212, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":212}}
Read message 
{"jsonrpc":"2.0","id":213,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":24}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 213, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":156},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp any) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":214,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 214, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":215,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":27}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 215, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":215}}
Read message 
{"jsonrpc":"2.0","id":216,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":27}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 216, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":216}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":157},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp any)  \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":217,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":28}}}
[server] Got a method textDocument/completion
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 217, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":217}}
Read message 
{"jsonrpc":"2.0","id":218,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":28}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 218, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":219,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 219, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":160},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp any) ||  \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":220,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":30}}}
[server] Got a method textDocument/completion
[server] processing took 0.0250339508057ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 220, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":220}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":221,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":31}}}
[server] Got a method textDocument/completion
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 221, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":164},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp any) || Typ. \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":222,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 222, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":223,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":35}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 223, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":223}}
Read message 
{"jsonrpc":"2.0","id":224,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":35}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 224, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":165},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp any) || Typ.() \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":225,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":36},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 225, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":226,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0219345092773ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 226, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":227,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 227, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":228,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":28},"end":{"line":240,"character":28}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 228, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":229,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 229, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":230,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":20},"end":{"line":240,"character":20}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 230, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":231,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 231, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":232,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":30},"end":{"line":240,"character":30}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 232, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":233,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 233, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":234,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":37},"end":{"line":240,"character":37}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 234, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":235,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 235, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":236,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":36},"end":{"line":240,"character":36}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 236, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":237,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 237, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":238,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":9},"end":{"line":240,"character":9}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 238, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":170},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not (Typ.(equiv tp any) || Typ.() \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":239,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":14},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 239, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":240,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 240, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":241,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 241, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":242,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":39},"end":{"line":240,"character":39}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 242, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":243,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 243, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":244,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":40},"end":{"line":240,"character":40}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 244, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":245,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0550746917725ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 245, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":246,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":41},"end":{"line":240,"character":41}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 246, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":171},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not (Typ.(equiv tp any) || Typ.(e) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":247,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":42}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 247, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":247}}
Read message 
{"jsonrpc":"2.0","id":248,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":42}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 248, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":174},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not (Typ.(equiv tp any) || Typ.(equi) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":249,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":43}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 249, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":249}}
Read message 
{"jsonrpc":"2.0","id":250,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":43}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 250, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":251,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 251, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":176},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not (Typ.(equiv tp any) || Typ.(equive) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":252,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":46}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 252, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":252}}
Read message 
{"jsonrpc":"2.0","id":253,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":46}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 253, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":254,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":47}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 254, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":255,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 255, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":256,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":41},"end":{"line":240,"character":41}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 256, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":257,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 257, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":258,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":40},"end":{"line":240,"character":41}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 258, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":177},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not (Typ.(equiv tp any) || Typ.equive) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":259,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 259, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":178},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not (Typ.(equiv tp any) || equive) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":260,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 260, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":261,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 261, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":262,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":18},"end":{"line":240,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 262, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":263,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 263, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":264,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":14},"end":{"line":240,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 264, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":179},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not ((equiv tp any) || equive) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":265,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":14},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 265, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":266,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 266, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":180},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.((equiv tp any) || equive) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":267,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 267, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":268,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 268, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":269,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":42},"end":{"line":240,"character":42}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 269, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":181},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.((equiv tp any) || equiv) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":270,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 270, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":271,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 271, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":272,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":36},"end":{"line":240,"character":36}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00977516174316ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 272, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":273,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 273, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":274,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":33},"end":{"line":240,"character":33}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 274, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":182},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.((equiv tp any || equiv) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":275,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 275, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":276,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":19},"end":{"line":240,"character":19}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 276, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":183},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp any || equiv) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":277,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":18},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 277, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":278,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 278, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":279,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 279, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":280,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":39},"end":{"line":240,"character":39}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 280, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":184},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp any || equiv ) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":281,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":40}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 281, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":186},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp any || equiv tp) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":282,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":41}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 282, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":282}}
Read message 
{"jsonrpc":"2.0","id":283,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":41}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 283, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":284,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 284, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":187},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp any || equiv tp ) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":285,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":43}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 285, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":285}}
Read message 
{"jsonrpc":"2.0","id":286,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":43}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 286, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":287,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 287, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":188},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp any || equiv tp) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":288,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 288, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":189},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp any || equiv tpa) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":289,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":43}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 289, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":191},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp any || equiv tp ) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":290,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":43}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 290, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":193},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp any || equiv tp an) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":291,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":44}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 291, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":291}}
Read message 
{"jsonrpc":"2.0","id":292,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":44}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 292, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":194},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp any || equiv tp any) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":293,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":46}}}
[server] Got a method textDocument/completion
[server] processing took 0.00977516174316ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 293, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":293}}
Read message 
{"jsonrpc":"2.0","id":294,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":46}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 294, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":295,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 295, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":296,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 296, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":297,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":27},"end":{"line":240,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 297, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":298,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 298, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":299,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":27},"end":{"line":240,"character":30}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 299, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":197},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp em || equiv tp any) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":300,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":29}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 300, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":300}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":301,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":29}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 301, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":200},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp empty || equiv tp any) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":302,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 302, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":303,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":48}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 303, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":304,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":48},"end":{"line":240,"character":48}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 304, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":305,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 305, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":306,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":49},"end":{"line":240,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 306, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":201},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp empty || equiv tp any)  \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":307,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":50}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 307, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":307}}
Read message 
{"jsonrpc":"2.0","id":308,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":50}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 308, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":205},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp empty || equiv tp any) else \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":309,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 309, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":310,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":54}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 310, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":207},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp empty || equiv tp any) else\n       \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":311,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":241,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 311, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":208},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp empty || equiv tp any) else\n         \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":312,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":241,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 312, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":218},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp empty || equiv tp any) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":313,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 313, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":219},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp empty || equiv tp any)  \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":314,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":50}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 314, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":221},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp empty || equiv tp any) th \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":315,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":51}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 315, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":315}}
Read message 
{"jsonrpc":"2.0","id":316,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":51}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 316, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":223},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if not Typ.(equiv tp empty || equiv tp any) then \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":317,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":54}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 317, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":318,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 318, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":319,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 319, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":320,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":13},"end":{"line":240,"character":13}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 320, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":224},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":321,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 321, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":322,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":50}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 322, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":323,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":50},"end":{"line":240,"character":50}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 323, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":228},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        a \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":324,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":241,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 324, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":230},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":325,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":241,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 325, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":231},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc  \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":326,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":241,"character":12}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 326, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":326}}
Read message 
{"jsonrpc":"2.0","id":327,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":241,"character":12}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 327, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":328,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":241,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 328, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":237},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      el \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":329,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":242,"character":7}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 329, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":329}}
Read message 
{"jsonrpc":"2.0","id":330,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":242,"character":7}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 330, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":239},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":331,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":242,"character":10}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 331, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":242},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else\n         \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":332,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 332, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":247},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":333,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":242,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 333, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":248},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else  \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":334,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":242,"character":11}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 334, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":249},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else () \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":335,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":242,"character":12},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 335, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":251},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else (\n      ) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":336,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 336, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":254},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else (\n\n      ) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":255},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else (\n        \n      ) \n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":337,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 337, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":338,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":246,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 338, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":339,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":246,"character":45},"end":{"line":246,"character":46}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 339, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":340,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":201,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 340, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":341,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":201,"character":12},"end":{"line":201,"character":17}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 341, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":342,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":137,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 342, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":343,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":137,"character":19},"end":{"line":137,"character":24}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 343, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":344,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":201,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 344, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":345,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":201,"character":12},"end":{"line":201,"character":17}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 345, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":346,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":244,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 346, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":347,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":244,"character":8},"end":{"line":245,"character":6}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 347, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":348,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":244,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0278949737549ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 348, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":349,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":244,"character":8},"end":{"line":244,"character":8}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 349, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":350,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":242,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 350, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":351,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":242,"character":11},"end":{"line":244,"character":8}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 351, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":260},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begn\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":352,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":242,"character":13}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 352, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":353,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":242,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 353, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":265},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":354,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":8}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 354, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":355,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 355, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":267},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        \n        \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":356,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":244,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 356, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":269},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":357,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 357, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":272},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        lry\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":358,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 358, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":358}}
Read message 
{"jsonrpc":"2.0","id":359,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":11}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 359, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":359}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":274},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        lry y\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":360,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":12}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 360, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":360}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":276},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        lry yd \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":361,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":15}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 361, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":277},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        lry yd =\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":362,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 362, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":283},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        lr\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":363,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 363, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":286},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":364,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":10}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 364, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":364}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":287},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":365,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":12}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 365, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":365}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":291},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts =\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":366,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":15}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 366, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":367,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 367, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":292},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":368,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":17}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 368, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":369,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 369, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":293},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = T\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":370,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":18}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 370, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":370}}
Read message 
{"jsonrpc":"2.0","id":371,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":18}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 371, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":294},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Ty\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":372,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 372, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":296},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":373,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":21}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 373, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":373}}
Read message 
{"jsonrpc":"2.0","id":374,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":21}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 374, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":297},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.()\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":375,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":22},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 375, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":374}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":299},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(ca)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":376,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":23}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 376, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":376}}
Read message 
{"jsonrpc":"2.0","id":377,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":23}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 377, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":300},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":378,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 378, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":301},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":379,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":26}}}
[server] Got a method textDocument/completion
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 379, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":379}}
Read message 
{"jsonrpc":"2.0","id":380,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":26}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 380, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":381,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 381, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":302},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap t)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":382,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":27}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 382, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":382}}
Read message 
{"jsonrpc":"2.0","id":383,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":27}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 383, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":384,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 384, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":303},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap ts)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":385,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 385, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":304},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap ts )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":386,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":29}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 386, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":387,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 387, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":307},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap ts @@ )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":388,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":32}}}
[server] Got a method textDocument/completion
[server] processing took 0.0181198120117ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 388, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":389,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 389, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":390,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 390, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":391,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":243,"character":28},"end":{"line":243,"character":28}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 391, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":309},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":392,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":28}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 392, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":392}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":393,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":28}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 393, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":394,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 394, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":395,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":243,"character":32},"end":{"line":243,"character":32}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 395, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":310},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ T)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":396,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":33}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 396, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":396}}
Read message 
{"jsonrpc":"2.0","id":397,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":33}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 397, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":398,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 398, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":311},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":399,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 399, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":315},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":400,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 400, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":400}}
Read message 
{"jsonrpc":"2.0","id":401,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 401, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":402,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 402, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":317},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Ty)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":403,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 403, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":318},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":404,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":35}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 404, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":404}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":405,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":35}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 405, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":320},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typis)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":406,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 406, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":407,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":37}}}
[server] Got a method textDocument/completion
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 407, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":322},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":408,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 408, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":323},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":409,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 409, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":325},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(equiv tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":410,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 410, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":411,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 411, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":412,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":13},"end":{"line":240,"character":20}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 412, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":326},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.tp empty || equiv tp any) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":413,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 413, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":414,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 414, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":415,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":16},"end":{"line":240,"character":39}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 415, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":330},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":416,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 416, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":331},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":417,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":14},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 417, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":332},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.()then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":418,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 418, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":419,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 419, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":420,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":240,"character":14},"end":{"line":240,"character":14}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 420, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":334},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is)then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":421,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":15}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 421, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":421}}
Read message 
{"jsonrpc":"2.0","id":422,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":15}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 422, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":336},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_a)then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":423,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 423, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":338},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_ant)then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":424,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":20}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 424, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":339},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_ant )then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":425,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":21}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 425, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":426,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 426, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":341},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_ant tp)then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":427,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":22}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 427, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":427}}
Read message 
{"jsonrpc":"2.0","id":428,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":22}}}
[server] Got a method textDocument/completion
[server] processing took 0.0231266021729ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 428, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":429,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 429, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":346},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any)then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":430,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":20}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 430, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":430}}
Read message 
{"jsonrpc":"2.0","id":431,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":20}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 431, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":347},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any )then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":432,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":21}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 432, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":432}}
Read message 
{"jsonrpc":"2.0","id":433,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":21}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 433, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":348},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any t)then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":434,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":22}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 434, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":434}}
Read message 
{"jsonrpc":"2.0","id":435,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":22}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 435, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":436,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 436, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":349},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp)then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":437,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 437, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":350},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp )then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":438,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":24}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 438, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":438}}
Read message 
{"jsonrpc":"2.0","id":439,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":24}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 439, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":440,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 440, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":353},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || )then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":441,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":26}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 441, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":441}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":442,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":27}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 442, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":356},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_)then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":443,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 443, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":358},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_em)then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":444,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":31}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 444, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":444}}
Read message 
{"jsonrpc":"2.0","id":445,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":32}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 445, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":361},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty)then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":446,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 446, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":362},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_emptyy)then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":447,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":36}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 447, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":448,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 448, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":364},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty )then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":449,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":36}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 449, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":366},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty yp)then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":450,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":38}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 450, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":451,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 451, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":367},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty yp) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":452,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 452, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":369},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.is)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":453,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":240,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 453, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":454,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 454, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":455,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":243,"character":39},"end":{"line":243,"character":39}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 455, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":456,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 456, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":457,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":243,"character":38},"end":{"line":243,"character":38}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 457, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":458,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 458, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":459,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":243,"character":36},"end":{"line":243,"character":38}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 459, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":371},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":460,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 460, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":372},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":461,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 461, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":462,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 462, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":373},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.| pattern -> )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":463,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 463, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":374},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.|  -> )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":464,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 464, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":376},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":465,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 465, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":382},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Ty)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":466,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":33}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 466, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":466}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":467,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":34}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 467, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":384},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":468,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 468, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":469,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 469, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":469}}
Read message 
{"jsonrpc":"2.0","id":470,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/completion
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 470, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":385},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ.  )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":471,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 471, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":386},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ. )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":472,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 472, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":473,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00286102294922ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 473, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":474,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":243,"character":36},"end":{"line":243,"character":36}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 474, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":388},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ. )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":475,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 475, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":475}}
Read message 
{"jsonrpc":"2.0","id":476,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 476, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":477,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 477, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":478,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":242,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 478, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":479,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":242,"character":16},"end":{"line":242,"character":16}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 479, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":480,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0338554382324ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 480, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":481,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":243,"character":35},"end":{"line":243,"character":35}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 481, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":389},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":390},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let ts = Typ.(cap tp @@ Typ. )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":482,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 482, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":482}}
Read message 
{"jsonrpc":"2.0","id":483,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 483, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":484,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 484, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":485,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":237,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 485, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":486,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":237,"character":20},"end":{"line":237,"character":20}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 486, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/typing.ml","languageId":"ocaml","version":0,"text":"open Stt\n\nexception Type_error of string\n\nlet error ?loc fmt =\n  Format.(kasprintf (fun s -> raise (Type_error (\n      asprintf \"%a: %s\" (pp_print_option Loc.pp) loc s\n    ))))\n    fmt\n\nmodule IdentTable = Hashtbl.Make (Ident)\nmodule IdentSet = Set.Make (Ident)\nmodule IdentMap = Map.Make (Ident)\n\nlet mk_name = let i = ref 0 in\n  fun () -> incr i;\n    Ident.cons (\"#RE_\" ^ (string_of_int !i))\n\nlet is_gen_name n =\n  let s = Ident.(!!n) in\n  String.length s = 0 || s.[0] = '#'\n\nmodule Re_compile : sig\n  val compile : Ast.Located.re -> Ast.Located.typ\nend = struct\n  (* Glushkov automata, aka Berry-Sethi construction. Our alphabet is the set of\n     occurrences of (Re_typ t) in the regexp. No need to linerize since each t\n     is localized and therefore unique.\n  *)\n\n  let rec first re = match snd re with\n    | `Re_epsilon -> IdentSet.empty\n    | `Re_typ t -> IdentSet.singleton t\n    | `Re_alt (r1, r2) -> IdentSet.union (first r1) (first r2)\n    | `Re_concat ((eps1,_) as r1, r2) when eps1 -> IdentSet.union (first r1) (first r2)\n    | `Re_concat (r1, _) -> first r1\n    | `Re_star r -> first r\n\n  let rec last re = match snd re with\n    | `Re_epsilon -> IdentSet.empty\n    | `Re_typ t -> IdentSet.singleton t\n    | `Re_alt (r1, r2) -> IdentSet.union (last r1) (last r2)\n    | `Re_concat (r1, (eps2,_ as r2)) when eps2 -> IdentSet.union (last r2) (last r1)\n    | `Re_concat (_, r2) -> last r2\n    | `Re_star r -> last r\n\n  let rec follow t re = match snd re with\n    | `Re_epsilon | `Re_typ _ -> IdentSet.empty\n    | `Re_alt (r1, r2) -> IdentSet.union (follow t r1) (follow t r2)\n    | `Re_concat (r1, r2) ->\n      IdentSet.union (follow t r1)\n        (IdentSet.union (follow t r2)\n           (if IdentSet.mem t (last r1) then first r2 else IdentSet.empty))\n    | `Re_star r ->\n      IdentSet.union (follow t r)\n        (if IdentSet.mem t (last r) then first r else IdentSet.empty)\n\n  let compile re =\n    let open Loc in\n    let names = IdentTable.create 16 in\n    let fresh t =\n      let n = mk_name () in\n      IdentTable.add names n t; n\n    in\n    let rec unique re =\n      match re.descr with\n        `Re_epsilon -> (true,`Re_epsilon)\n      | `Re_typ t -> (false,`Re_typ (fresh t))\n      | `Re_alt (r1, r2) ->\n        let r1 = unique r1 in let r2 = unique r2 in\n        (fst r1 || fst r2,`Re_alt (r1, r2))\n      | `Re_concat (r1, r2) ->\n        let r1 = unique r1 in let r2 = unique r2 in\n        (fst r1 && fst r2,`Re_concat (r1, r2))\n      | `Re_star r -> true,`Re_star (unique r)\n    in\n    let start = mk_name () in\n    let rel = unique re in\n    let first = first rel and last = last rel in\n    let htypes = IdentTable.create 16 in\n    let nil = with_loc re.loc (`Typ Stt.Builtins.nil) in\n    let node loc name =\n      let name = with_loc loc name in\n      with_loc loc (`Node (ref (`Inst (name, []))))\n    in\n    let add_trans q_in t =\n      let t_orig = IdentTable.find names t in\n      let prod = copy_loc t_orig (`Pair(t_orig, node t_orig.loc t)) in\n      let new_t = try copy_loc t_orig (`Cup [IdentTable.find htypes q_in; prod]) with Not_found -> prod in\n      IdentTable.replace htypes q_in new_t\n    in\n    let set_final q = IdentTable.replace htypes q nil in\n    let () = if fst rel then set_final start in\n    let () = names\n             |> IdentTable.iter (fun t _ ->\n                 if IdentSet.mem t last then set_final t;\n                 if IdentSet.mem t first then add_trans start t;\n                 IdentSet.iter (add_trans t) (follow t rel))\n    in\n    with_loc re.loc\n      (`Node (ref (`Rec (node re.loc start,\n                         IdentTable.fold (fun x te acc ->\n                             (with_loc re.loc x, te) :: acc)\n                           htypes []))))\n\nend\n\nmodule Env : sig\n  type 'a t\n  val empty : 'a t\n  val add : Ast.Located.ident -> 'a -> 'a t -> 'a t\n  val replace : Ast.Located.ident -> 'a -> 'a t -> 'a t\n  val find : Ast.Located.ident -> 'a t -> 'a\n  val find_loc : Ast.Located.ident -> 'a t -> 'a * Loc.t\n  val find_unloc : Ident.t -> 'a t -> 'a * Loc.t\n  val find_opt : Ast.Located.ident -> 'a t -> 'a option\n  val find_loc_opt : Ast.Located.ident -> 'a t -> ('a * Loc.t) option\n  val find_unloc_opt : Ident.t -> 'a t -> ('a * Loc.t) option\n\n  val mem : Ast.Located.ident -> 'a t -> bool\n  val mem_unloc : Ident.t -> 'a t -> bool\n  val to_seq : 'a t -> (Ident.t * ('a * Loc.t)) Seq.t\nend =\nstruct\n  open Ident\n  type 'a t = ('a * Loc.t) IdentMap.t\n  let empty = IdentMap.empty\n  let to_seq e = IdentMap.to_seq e\n\n  let add n v env =\n    IdentMap.update n.Loc.descr\n      (function None -> Some (v,n.Loc.loc)\n              | Some (_, other) ->\n                error ~loc:n.Loc.loc \"Ident %s is already defined at %a\" !!(n.Loc.descr)\n                  Loc.pp other)\n      env\n\n  let replace n v env : 'a t =\n    IdentMap.add n.Loc.descr (v, n.Loc.loc) env\n\n  let find_unloc n env =\n    try (IdentMap.find n env) with Not_found -> error \"Ident %s is undefined\" !!n\n\n  let find_loc n env = find_unloc n.Loc.descr env\n\n  let find n env = fst (find_loc n env)\n\n  let find_unloc_opt n env =\n    IdentMap.find_opt n env\n\n  let find_loc_opt n env =\n    find_unloc_opt n.Loc.descr env\n\n  let find_opt n env =\n    Option.map fst (find_loc_opt n env)\n\n  let mem_unloc = IdentMap.mem\n\n  let mem n = IdentMap.mem n.Loc.descr\n\nend\ntype global_decl = {\n  decl : Ast.Located.decl;\n  vars : (Ident.t * Stt.Var.t) list;\n  typ : Stt.Typ.t;\n  recs : Ast.Located.typ Env.t;\n}\n\nmodule GlobalDecl (*: Stt.Base.Common.T with type t = global_decl *)=\nstruct\n  type t = global_decl\n  let name = \"GlobalDecl\"\n  let compare a b =\n    let na = a.decl.Ast.name in\n    let nb = b.decl.Ast.name in\n    let open Stt.Base.Common.Let in\n    let<> () = Ident.compare na.Loc.descr nb.Loc.descr in\n    Loc.compare na.Loc.loc nb.Loc.loc\n\n  let equal a b = compare a b = 0\n  let hash a = Hashtbl.hash a\n\n  let pp fmt a =\n    let open Format in\n    let pp_list pe fmt l =\n      pp_print_list ~pp_sep:(fun fmt () -> pp_print_string fmt \",\" ) pe fmt l\n    in\n    fprintf fmt \"@[\";\n    fprintf fmt \"@[Loc: %a@]@\\n\" Loc.pp a.decl.Ast.name.Loc.loc;\n    fprintf fmt \"@[Ident: %a\" Ident.pp a.decl.Ast.name.Loc.descr;\n    if a.vars <> [] then\n      fprintf fmt \" (%a)\" (pp_list\n                             (fun fmt (v, _) -> fprintf fmt \"'%a\" Ident.pp v)) a.vars;\n    fprintf fmt \"@]@\\n\";\n    fprintf fmt \"@[Recs: @[%a@]@]@\\n\" (pp_list Ident.pp)\n      (a.recs |> Env.to_seq |> Seq.map fst |> List.of_seq)\n\nend\ntype global = GlobalDecl.t Env.t\nlet empty = Env.empty\n\nlet enter_builtin name t (env : global) : global =\n  let open Ast in\n  let dummy_decl = {decl = {\n      name = Loc.(with_loc dummy) name;\n      params = [];\n      expr = Loc.(with_loc dummy) (`Typ t) } ;\n     vars = [];\n     typ = t;\n     recs = Env.empty }\n  in\n  Env.add dummy_decl.decl.name dummy_decl env\n\n\nlet default =\n  List.fold_left (fun acc (n, t) -> enter_builtin n t acc)\n    empty\n    Stt.Builtins.by_names\n\nlet dummy_expr : Ast.Located.typ =\n  Loc.(with_loc dummy (`Typ Stt.Typ.empty))\n\nlet derecurse global te =\n  let open Ast in\n  let open Loc in\n  let recs = ref Env.empty in\n  let rec loop collect params env te =\n    let do_loop = loop collect params env in\n    copy_loc te @@\n    match te.descr with\n      `Typ _ as d -> d\n    | `Pair (t1, t2) -> `Pair (do_loop t1, do_loop t2)\n    | `Arrow (t1, t2) -> `Arrow (do_loop t1, do_loop t2)\n    | `Cup l -> `Cup (List.map do_loop l)\n    | `Cap l -> `Cap (List.map do_loop l)\n    | `Diff (t1, t2) -> `Diff (do_loop t1, do_loop t2)\n    | `Neg t -> `Neg (do_loop t)\n    | `Var n as d -> begin\n        match Env.find_opt n params with\n          None -> d\n        | Some e -> (do_loop e).descr end\n    | `Regexp re ->\n      (do_loop (Re_compile.compile re)).descr\n    | `Node r -> `Node (loop_node collect params env r)\n    | `Extra _ -> .\n  and loop_node collect params env r =\n    let rnode = !r in\n    match rnode with\n    | `Rec (t, l) ->\n      let new_r = ref (`Expr dummy_expr) in\n      r := !new_r;\n      let todo, env' =\n        List.fold_left (fun (atodo, aenv) (n, d) ->\n            match Env.find_loc_opt n aenv with\n              None ->\n              let rd = ref (`Expr dummy_expr) in\n              rd :: atodo, Env.add n (d, rd) aenv\n            | Some (_, loc) ->\n              error ~loc:n.loc\n                \"Multiple definitions of recursive type variable %s, the previous one was at %a\"\n                Ident.(!!(n.descr)) Loc.pp loc) ([], env) l\n      in\n      let nt = loop collect params env' t in\n      let nl = List.rev_map (fun (n, te) -> (n, loop collect params env' te)) l in\n      let () = List.iter2 (fun rd ((x, nte)) ->\n          rd := `Expr nte;\n          if collect && not (is_gen_name x.descr) then recs := Env.add x nte !recs\n        ) todo nl\n      in new_r := `Expr nt; new_r\n    | `Inst (x, args) -> begin\n        match args, Env.find_opt x env with\n          _, None -> let new_r = ref (`Expr dummy_expr) in\n          inline_global collect params env x args new_r None\n        | [], Some (_, r) -> r\n        | _ -> error ~loc:x.loc \"Ident %s is a recursive type variable, it cannot be instantiated\"\n                 Ident.(!!(x.descr))\n      end\n\n    | `From (x, (y, args)) ->\n      let new_r = ref (`Expr dummy_expr) in\n      inline_global collect params env y args new_r  (Some x)\n    | `Expr _  -> r\n  and inline_global collect params env x args new_r teopt =\n    let args = List.map (loop collect params env) args in\n    let decl = Env.find x global in\n    let nparams =\n      try\n        List.fold_left2 (fun acc x arg ->\n            Env.add x arg acc\n          ) Env.empty\n          decl.decl.params args\n      with Invalid_argument _ ->\n        let num_params = List.length decl.decl.params in\n        error ~loc:x.loc \"Parametric type %s expects %d argument%s but was applied to %d\"\n          Ident.(!!(x.descr))\n          num_params\n          (if num_params < 2 then \"\" else \"s\")\n          (List.length args)\n    in\n    let te = match teopt with\n        None -> decl.decl.expr\n      | Some n -> Env.find n decl.recs\n    in\n    let d = loop false nparams env te in\n    new_r := `Expr d;\n    new_r\n  in\n  let res = loop true Env.empty Env.empty te in\n  res, !recs\n\nmodule Memo = Hashtbl.Make (struct\n    type t = Ast.Located.node ref\n    let hash = Hashtbl.hash\n    let equal a b = a == b\n  end)\nlet expand te =\n  let open Loc in\n  let memo = Memo.create 16 in\n  let rec loop (te : Ast.Located.typ) =\n    with_loc te.loc @@\n    match te.descr with\n    | (`Typ _ | `Pair _ | `Arrow _ | `Var _ | `Regexp _) as d -> d\n    | `Cup l -> `Cup (List.map loop l)\n    | `Cap l -> `Cap (List.map loop l)\n    | `Diff (t1, t2) -> `Diff (loop t1, loop t2)\n    | `Neg t -> `Neg (loop t)\n    | `Node r -> `Node (follow te.loc r)\n    | `Extra _ -> .\n  and follow loc (r : Ast.Located.node ref) =\n    try\n      let visiting = Memo.find memo r in\n      if visiting then\n        error ~loc \"Ill-founded recursion\"\n      else r\n    with Not_found ->\n      Memo.add memo r true;\n      begin\n        match !r with\n          `Expr { descr = `Node r' ; loc } ->\n          let r' = follow loc r' in\n          r := !r'\n        | `Expr te -> r := `Expr (loop te)\n        | _ -> assert false\n      end;\n      Memo.replace memo r false;\n      r\n  in loop te\n\nlet comb_list op f empty l =\n  match l with (* avoid suprious operations with any/empty *)\n    [] -> empty\n  | [ e ] -> f e\n  | e :: l -> List.fold_left (fun acc e -> op acc (f e)) (f e) l\n\nlet build_type var_map te =\n  let open Stt.Typ in\n  let memo = Memo.create 16 in\n  let rec loop (te:Ast.Located.typ) =\n    match te.Loc.descr with\n      `Typ t -> node t\n    | `Pair (t1, t2) -> node @@ product (loop t1) (loop t2)\n    | `Arrow (t1, t2) -> node @@ arrow (loop t1) (loop t2)\n    | `Cup l -> node @@ comb_list cup (fun t -> descr (loop t)) Typ.empty l\n    | `Cap l -> node @@ comb_list cap (fun t -> descr (loop t)) Typ.any l\n    | `Diff (t1, t2) -> node @@ diff (descr (loop t1)) (descr (loop t2))\n    | `Neg t -> node @@ neg (descr (loop t))\n    | `Var lident ->\n      (try\n         IdentMap.find lident.descr var_map\n       with Not_found -> error ~loc:te.Loc.loc \"Unbound polymorphic variable '%s\"\n                           Ident.(!!(lident.descr)))\n    | `Regexp _ -> assert false\n    | `Extra _ -> .\n    | `Node r -> begin\n        match Memo.find memo r with\n        | None -> let n = make () in Memo.replace memo r (Some n); n\n        | Some n -> n\n        | exception Not_found ->\n          Memo.add memo r None;\n          let nte =\n            match !r with\n              `Expr te -> loop te\n            | _ -> assert false\n          in\n          match Memo.find memo r with\n            None -> Memo.replace memo r (Some nte); nte\n          | Some n ->\n            def n (descr nte);n\n      end\n  in loop te\n\nlet type_decl global decl =\n  let open Ast in\n  let te, recs = derecurse global decl.expr in\n  let te = expand te in\n  let var_list, var_map = List.fold_left (fun (al, am) x ->\n      let s = Ident.(!!(x.Loc.descr)) in\n      let v = Var.make s in\n      let vt = Stt.Typ.(node @@ var v) in\n      (x.Loc.descr, v)::al, IdentMap.add x.Loc.descr vt am\n    ) ([], IdentMap.empty) decl.params\n  in\n  let typ = Stt.Typ.descr @@ build_type var_map te in\n  let gd = {\n    decl;\n    vars = List.rev var_list;\n    typ;\n    recs;\n  }\n  in\n  gd, Env.add decl.name gd global\n\n"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":487,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":243,"character":36},"end":{"line":243,"character":36}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 487, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml","languageId":"ocaml","version":0,"text":"let parse_type env s =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t,env' = Syntax.Typing.(type_decl env t_ast) in\n    t.Syntax.Typing.typ, env'\n\nopen Stt\nmodule Normal = Base.Cartesian.Make (Typ) (Typ)\nlet extract (n1, n2) = Typ.descr n1, Typ.descr n2\n\nlet any_star =\n  let open Typ in\n  let x = make () in\n  let p = product (node any) x in\n  let c = cup Builtins.nil p in\n  let () = def x c in\n  c\n\nlet format_auto fmt t =\n  let open Format in\n  let state = let s = ref ~-1 in\n    fun () -> incr s; !s in\n  let init = state () in\n  let finals = ref [] in\n  let states = ref [(t, init)] in\n  let trans = ref [] in\n  let rec loop t q =\n    if Typ.subtype Builtins.nil t then finals := q :: !finals;\n    states := (t, q) :: !states;\n    let prod = Typ.VarProduct.(full_dnf (get t))\n               |> Seq.map snd\n               |> Seq.map (fun (pl, nl) ->\n                   (List.map extract pl,\n                    List.map extract nl)\n                 )\n    in\n    let norm = Normal.normal prod in\n    let todo = \n      norm |>\n      List.fold_left (fun acc (t1, t2) ->\n          let q', acc = match List.find_opt (fun (t', _) -> Typ.equiv t2 t') (!states@acc) with\n              None -> let q = state () in q, (t2,q)::acc\n            | Some (_, q') -> q', acc\n          in\n          let l1 = \n            let s = asprintf \"%a\" Syntax.Pretty.pp t1 in\n            String.split_on_char '|' s\n            |> List.map String.trim\n          in\n          List.iter (fun s -> trans := (q, s, q') :: !trans) l1;\n          acc\n        ) []\n    in\n    List.iter (fun (t,q) -> loop t q) todo\n  in\n  let () = loop t init in\n  fprintf fmt \"%d@\\n\" (state());\n  pp_print_list ~pp_sep:(fun fmt () -> Format.pp_print_string fmt \",\")\n    pp_print_int\n    fmt  !finals;\n  fprintf fmt \"@\\n\";\n  List.iter (fun (q, s, q') ->\n      fprintf fmt \"%d,%s,%d@\\n\" q s q') (List.sort compare !trans)\n\n\n\nlet dump_auto env path s =\n  let t, env' = parse_type env s in\n  if not (Typ.subtype t any_star) then\n    Format.eprintf \"Ignoring %s, which is not a subtype of [Any*]@\\n\" s\n  else begin\n    let c_out = open_out_bin path in\n    let fmt = Format.formatter_of_out_channel c_out in\n    Format.fprintf fmt \"%s@\\n\" s;\n    format_auto fmt t;\n    Format.pp_print_flush fmt ();\n    close_out c_out;\n  end;\n  env'\n\n(*\nSyntax of types:\ntype t = [ regexp1 ] | [ regexp2 ] | ...\n\nSyntax of regexps = \n- symbols can be:\n    - Int, Bool\n    - variants: `A, `B, `foo, (like OCaml's polymorphic variants). Note: Bool ≡ `false | `true\n    - any previously defined type\n\n- Union |, concaténation ;\n- *, +, ?\nou expression entièrement vide\n\n*)\nlet main () =\n  let l = [ \n    \"type t0 = [ `A;`B;`C ]\";\n    \"type t1 = [ Int*; Int ]\";\n    \"type t2 = [ (Int|Bool)*; Int ]\";\n    \"type t3 = [ Bool;Bool+ ]\";\n    \"type t4 = [ ((`A|`B); Int)+ ]\";\n    \"type t5 = t0 | [ Bool ]\";\n    \"type t6 = t0 | []\";\n    \"type t7 = []\";\n    \"type t8 = [ ((`A|`B)*; `A*;`C)+ ]\";\n\n    ]\n  in\n  List.fold_left (fun (i, env) s ->\n      let path = Format.sprintf \"test/auto%03d.txt\" i in\n      let env' = dump_auto env path s in\n      (i+1, env')\n    ) (0, Syntax.Typing.default) l\n  |> ignore\n\n\nlet () = main ()"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":488,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":11,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 488, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":489,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":11,"character":0},"end":{"line":18,"character":3}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 489, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":490,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":12,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 490, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":491,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":12,"character":0},"end":{"line":18,"character":3}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 491, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":492,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":243,"character":36},"end":{"line":243,"character":36}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 492, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":493,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":242,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 493, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":494,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":242,"character":16},"end":{"line":242,"character":16}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 494, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":394},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n  let open Typ in\n  let x = make () in\n  let p = product (node any) x in\n  let c = cup Builtins.nil p in\n  let () = def x c in\n  c\n        let ts = Typ.(cap tp @@ Typ. )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":495,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":249,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 495, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":496,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":245,"character":1}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 496, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":497,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":245,"character":1},"end":{"line":248,"character":4}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 497, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":498,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":245,"character":1}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 498, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":499,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":245,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 499, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":500,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":245,"character":0},"end":{"line":249,"character":3}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 500, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":412},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n        let open Typ in\n        let x = make () in\n        let p = product (node any) x in\n        let c = cup Builtins.nil p in\n        let () = def x c in\n        c\n        let ts = Typ.(cap tp @@ Typ. )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":501,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":249,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 501, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":418},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        let ts = Typ.(cap tp @@ Typ. )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":502,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":249,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0219345092773ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 502, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":503,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":249,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 503, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":504,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":249,"character":11},"end":{"line":249,"character":11}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 504, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":421},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        \n        let ts = Typ.(cap tp @@ Typ. )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":505,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":250,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 505, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":423},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.(cap tp @@ Typ. )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":506,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":250,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 506, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":506}}
Read message 
{"jsonrpc":"2.0","id":507,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":250,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 507, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":508,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":250,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 508, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":509,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 509, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":510,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":251,"character":37},"end":{"line":251,"character":37}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 510, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":511,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 511, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":512,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":251,"character":29},"end":{"line":251,"character":37}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 512, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":424},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.(cap tp )\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":513,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 513, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":426},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.(cap tp an)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":514,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":30}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 514, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":514}}
Read message 
{"jsonrpc":"2.0","id":515,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":30}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 515, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":428},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.(cap tp any_)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":516,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":32}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 516, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":516}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":517,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":33}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 517, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":431},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.(cap tp any_wat)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":518,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 518, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":519,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 519, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":438},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.(cap tp any_star)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":520,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":37}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 520, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":520}}
Read message 
{"jsonrpc":"2.0","id":521,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":37}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 521, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":522,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 522, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":523,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 523, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":524,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":251,"character":38},"end":{"line":251,"character":38}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 524, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":439},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.(cap tp any_star) \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":525,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":39}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 525, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":525}}
Read message 
{"jsonrpc":"2.0","id":526,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":39}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 526, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":441},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.(cap tp any_star) in\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":527,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 527, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":528,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":41}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 528, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":528}}
Read message 
{"jsonrpc":"2.0","id":529,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":41}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 529, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":443},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.(cap tp any_star) in\n        \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":530,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 530, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":445},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star) in\n\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":531,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 531, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":446},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":532,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 532, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":533,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 533, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":534,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":253,"character":9},"end":{"line":253,"character":9}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 534, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":448},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        a\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":535,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 535, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":535}}
Read message 
{"jsonrpc":"2.0","id":536,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 536, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":450},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":537,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 537, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":538,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 538, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":539,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":251,"character":12},"end":{"line":251,"character":12}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 539, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":540,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":251,"character":12},"end":{"line":251,"character":12}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 540, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":541,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 541, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":542,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":252,"character":11},"end":{"line":252,"character":11}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 542, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":543,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 543, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":544,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":252,"character":8},"end":{"line":252,"character":11}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 544, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":453},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":545,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":10}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 545, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":545}}
Read message 
{"jsonrpc":"2.0","id":546,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":10}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 546, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":547,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 547, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":454},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":548,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":11}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 548, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":548}}
Read message 
{"jsonrpc":"2.0","id":549,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":11}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 549, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":550,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 550, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":457},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":551,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":14}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 551, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":551}}
Read message 
{"jsonrpc":"2.0","id":552,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":14}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 552, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":458},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":553,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":15}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 553, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":553}}
Read message 
{"jsonrpc":"2.0","id":554,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":15}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 554, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":460},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":555,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":16}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 555, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":555}}
Read message 
{"jsonrpc":"2.0","id":556,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":16}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 556, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":461},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":557,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":18}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 557, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":557}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":558,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":18}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 558, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":558}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":468},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty y\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":559,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":24}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 559, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":559}}
Read message 
{"jsonrpc":"2.0","id":560,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":25}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 560, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":469},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ys\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":561,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 561, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":562,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":0}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 562, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":471},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":563,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 563, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":472},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty t\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":564,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":25}}}
[server] Got a method textDocument/completion
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 564, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":474},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":565,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":27}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 565, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":565}}
Read message 
{"jsonrpc":"2.0","id":566,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":27}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 566, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":476},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts th\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":567,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":28}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 567, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":567}}
Read message 
{"jsonrpc":"2.0","id":568,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":29}}}
[server] Got a method textDocument/completion
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 568, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":478},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":569,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 569, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":570,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":31}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 570, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":480},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n        \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":571,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 571, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":481},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":572,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 572, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":482},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          a\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":573,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":11}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 573, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":484},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":574,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 574, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":486},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          acc\n          \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":575,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 575, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":489},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          acc\n        el\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":576,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 576, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":576}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":577,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":10}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 577, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":494},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          acc\n        else\n          \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":578,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":255,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 578, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":579,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":255,"character":10}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 579, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":579}}
Read message 
{"jsonrpc":"2.0","id":580,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":255,"character":10}}}
[server] Got a method textDocument/completion
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 580, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":497},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          acc\n        else\n          acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":581,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":255,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 581, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":582,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":255,"character":13}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 582, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":582}}
Read message 
{"jsonrpc":"2.0","id":583,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":255,"character":13}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 583, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":584,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 584, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":585,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":243,"character":13},"end":{"line":243,"character":13}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 585, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":586,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":255,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 586, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":587,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":255,"character":10},"end":{"line":255,"character":10}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 587, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":503},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":588,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":255,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 588, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":589,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 589, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":590,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":254,"character":12},"end":{"line":254,"character":12}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 590, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":591,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 591, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":592,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":253,"character":13},"end":{"line":253,"character":13}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 592, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":593,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 593, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":594,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":253,"character":10},"end":{"line":253,"character":10}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 594, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":505},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          \n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":506},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n            \n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":595,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 595, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":507},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          \n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":596,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 596, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":510},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let\n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":597,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":13}}}
[server] Got a method textDocument/completion
[server] processing took 0.0209808349609ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 597, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":598,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 598, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":511},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let \n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":599,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":14}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 599, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":600,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 600, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":513},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let r \n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":601,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":15}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 601, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":601}}
Read message 
{"jsonrpc":"2.0","id":602,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":15}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 602, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":602}}
Read message 
{"jsonrpc":"2.0","id":603,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":16}}}
[server] Got a method textDocument/completion
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 603, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":603}}
Read message 
{"jsonrpc":"2.0","id":604,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":16}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 604, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":514},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let r =\n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":605,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 605, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":515},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let r = \n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":606,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":18}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 606, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":606}}
Read message 
{"jsonrpc":"2.0","id":607,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":18}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 607, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":516},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let r = T\n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":608,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 608, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":518},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let r = Typ\n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":609,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":20}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 609, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":609}}
Read message 
{"jsonrpc":"2.0","id":610,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":21}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 610, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":525},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let r = Typ.empsty\n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":611,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 611, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":612,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":28}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 612, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":529},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let r = Typ.empt\n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":613,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":26}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 613, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":530},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let r = Typ.empty\n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":614,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 614, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":531},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let r = Typ.empty \n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":615,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":28}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 615, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":615}}
Read message 
{"jsonrpc":"2.0","id":616,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":28}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 616, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":533},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let r = Typ.empty in\n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":617,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 617, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":618,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":30}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 618, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":618}}
Read message 
{"jsonrpc":"2.0","id":619,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":30}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 619, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":620,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 620, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":621,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":253,"character":16},"end":{"line":253,"character":16}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 621, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":622,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 622, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":623,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":253,"character":15},"end":{"line":253,"character":15}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 623, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":537},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":624,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":15}}}
[server] Got a method textDocument/completion
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 624, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":624}}
Read message 
{"jsonrpc":"2.0","id":625,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":16}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 625, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":626,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 626, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":627,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":17}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 627, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":628,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 628, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":629,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":254,"character":13},"end":{"line":254,"character":13}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 629, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":630,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 630, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":631,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":254,"character":10},"end":{"line":254,"character":10}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 631, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":543},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp ::acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":632,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 632, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":544},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":633,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 633, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":545},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp ::acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":634,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 634, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":546},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":635,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 635, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":547},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: Lacc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":636,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0259876251221ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 636, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":550},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: Listacc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":637,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 637, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":551},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: List.acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":638,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":22}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 638, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":556},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: List.cp,nsacc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":639,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 639, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":560},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: List.cacc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":563},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: List.consacc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":640,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 640, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":564},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: List.cons acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":641,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 641, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":568},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: List.cacc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":642,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 642, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":572},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: List.cp,nsacc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":643,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 643, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":581},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: Lacc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":644,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0219345092773ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 644, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":583},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp ::acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":645,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 645, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":585},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: (acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":646,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":18},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 646, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":590},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: () :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":647,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 647, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":648,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":254,"character":22},"end":{"line":254,"character":22}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 648, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":649,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 649, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":650,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":254,"character":18},"end":{"line":254,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 650, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":591},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: (T) :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":651,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":19}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 651, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":651}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":652,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":19}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 652, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":595},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: (Type.) :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":653,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 653, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":654,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":23}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 654, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":654}}
Read message 
{"jsonrpc":"2.0","id":655,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":23}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 655, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":655}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":598},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: (Typ.) :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":656,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":22}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 656, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":656}}
Read message 
{"jsonrpc":"2.0","id":657,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":22}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 657, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":658,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 658, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":600},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: (Typ.di) :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":659,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":24}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 659, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":659}}
Read message 
{"jsonrpc":"2.0","id":660,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":24}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 660, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":601},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: (Typ.dif) :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":661,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 661, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":602},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff) :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":662,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":26}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 662, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":662}}
Read message 
{"jsonrpc":"2.0","id":663,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":26}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 663, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":664,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00309944152832ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 664, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":603},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff ) :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":665,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":27}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 665, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":665}}
Read message 
{"jsonrpc":"2.0","id":666,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":27}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 666, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":667,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 667, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":605},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp) :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":668,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":28}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 668, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":668}}
Read message 
{"jsonrpc":"2.0","id":669,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":29}}}
[server] Got a method textDocument/completion
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 669, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":669}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":606},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ) :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":670,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":30}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 670, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":670}}
Read message 
{"jsonrpc":"2.0","id":671,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":30}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 671, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":672,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 672, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":608},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":673,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":32}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 673, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":673}}
Read message 
{"jsonrpc":"2.0","id":674,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":32}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 674, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":675,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 675, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":676,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":243,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 676, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":677,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":243,"character":21},"end":{"line":243,"character":21}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 677, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":678,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 678, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":679,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":254,"character":23},"end":{"line":254,"character":23}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 679, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":680,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 680, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":681,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":254,"character":24},"end":{"line":254,"character":24}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 681, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":682,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 682, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":683,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":254,"character":26},"end":{"line":254,"character":26}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 683, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":684,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 684, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":685,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 685, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":686,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":254,"character":29},"end":{"line":254,"character":29}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 686, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":687,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 687, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":688,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":253,"character":28},"end":{"line":253,"character":28}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 688, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":689,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 689, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":690,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":253,"character":25},"end":{"line":253,"character":25}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 690, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":691,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 691, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":692,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":253,"character":22},"end":{"line":253,"character":22}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 692, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":693,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":253,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 693, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":694,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":253,"character":24},"end":{"line":253,"character":24}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 694, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":695,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 695, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":696,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":252,"character":31},"end":{"line":252,"character":31}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 696, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":609},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then \n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":697,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":32}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 697, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":698,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 698, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":610},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then b\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":699,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":33}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 699, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":612},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then bei\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":700,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":34}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 700, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":701,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 701, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":616},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":702,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 702, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":703,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":255,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 703, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":704,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":255,"character":8},"end":{"line":255,"character":8}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 704, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":620},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":705,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":255,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 705, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":706,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 706, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":707,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":254,"character":13},"end":{"line":254,"character":13}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 707, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":708,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 708, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":709,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":254,"character":12},"end":{"line":254,"character":12}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 709, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":710,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":254,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 710, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":711,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":11,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 711, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":712,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":11,"character":12},"end":{"line":11,"character":12}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 712, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":622},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  \n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":713,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 713, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":624},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | \n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":714,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":4}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 714, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":626},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Te\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":715,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":5}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 715, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":715}}
Read message 
{"jsonrpc":"2.0","id":716,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":6}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 716, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":717,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 717, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":718,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 718, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":629},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | R\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":719,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":5}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 719, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":719}}
Read message 
{"jsonrpc":"2.0","id":720,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":5}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 720, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":632},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Rege\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":721,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":7}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 721, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":721}}
Read message 
{"jsonrpc":"2.0","id":722,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":7}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 722, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":723,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":8}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 723, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":723}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":633},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regex\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":724,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 724, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":634},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":725,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0181198120117ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 725, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":726,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":10}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 726, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":726}}
Read message 
{"jsonrpc":"2.0","id":727,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":10}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 727, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":727}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":635},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp \n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":728,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":11}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 728, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":728}}
Read message 
{"jsonrpc":"2.0","id":729,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":11}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 729, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":636},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp o\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":730,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 730, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":637},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":731,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":13}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 731, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":732,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 732, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":646},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | \n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":733,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 733, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":648},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Te\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":734,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":12,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 734, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":654},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":735,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":11,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 735, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":736,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":231,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 736, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":737,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":231,"character":12},"end":{"line":231,"character":12}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 737, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":738,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":256,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 738, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":739,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":256,"character":19},"end":{"line":256,"character":19}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 739, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":740,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 740, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":741,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":252,"character":8},"end":{"line":256,"character":19}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 741, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":656},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc *)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":742,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 742, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":743,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":257,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 743, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":744,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":257,"character":9},"end":{"line":257,"character":9}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 744, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":745,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":256,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 745, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":746,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":256,"character":21},"end":{"line":256,"character":21}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 746, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":660},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc *)\n        a\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":747,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":257,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 747, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":662},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":748,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":257,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 748, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":749,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 749, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":750,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":251,"character":13},"end":{"line":251,"character":13}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 750, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":663},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then begin\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n        end else\n          tp :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":751,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 751, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":752,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":251,"character":13},"end":{"line":251,"character":13}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 752, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":753,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":251,"character":13},"end":{"line":251,"character":13}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 753, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":754,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 754, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":755,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":251,"character":12},"end":{"line":251,"character":12}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 755, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":756,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 756, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":757,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":251,"character":12},"end":{"line":251,"character":12}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 757, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
