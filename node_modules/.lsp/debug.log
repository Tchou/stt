Hello - from /home/p9romain/Téléchargements/Dev/ST3/rls-linux/reason-language-server
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 1, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","languageId":"ocaml","version":0,"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype regexp = Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/automaton/automaton.ml","languageId":"ocaml","version":0,"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet to_dot (automaton : t)\n           (file_name : string) : unit =\n  let file = open_out (file_name ^ \".dot\") in\n  Printf.fprintf file \"digraph automaton\\n{\\n\" ;\n  let i = ref 0 in\n  StateSet.iter ( \n    fun (state : state) : unit -> \n      Printf.fprintf file \"  __INVISIBLE_NODE_%d__ [label= \\\"\\\", shape=none,height=.0,width=.0] ;\\n\" !i ;\n      Printf.fprintf file \"  __INVISIBLE_NODE_%d__ -> %d ;\\n\" !i state ;\n      i := !i + 1\n  ) \n  automaton.starts ;\n  StateSet.iter ( \n    fun (state : state) : unit ->\n      Printf.fprintf file \"  %d [peripheries=2] ;\\n\" state \n  ) \n  automaton.ends ;\n  (* Not TransSet iter because I want to merge all transitions between two states *)\n  StateSet.iter (\n    fun (state1 : state) : unit ->\n      StateSet.iter (\n        fun (state2 : state) : unit ->\n          let letters = List.map (\n            fun (_, letter, _ : trans) : string -> \n              Format.asprintf \"%a\" Pretty.pp letter\n          ) \n            @@ TransSet.to_list \n            @@ get_transition_between automaton.trans state1 state2 \n          in\n          let letter = String.concat \", \" letters in\n          if letter <> \"\" then \n            Printf.fprintf file \"  %d -> %d [label=\\\"%s\\\"] ;\\n\" state1 state2 letter\n      )\n      automaton.states\n  ) \n  automaton.states ;\n  Printf.fprintf file \"}\" ;\n  close_out file\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 1 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans (i+1) (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/automaton/automaton.mli","languageId":"ocaml","version":0,"text":"type t\n(** The automaton type *)\ntype regexp\n(** The regexp type *)\n\nval empty : t\n(** The empty automaton *)\n\n\nval add_state : t -> int -> t\n(** [add_state automaton state] adds [state] in [automaton]. \n  If it's already a state in [automaton], does nothing *)\nval add_states : t -> int list -> t\n(** [add_states automaton states] adds several states in [automaton] *)\nval add_trans : t -> int -> Stt.Typ.t -> int -> t\n(** [add_trans automaton state1 letter state2] adds a transition labelled [letter] between [state1] and [state2] in [automaton].\n\n  Raises : [state1] and [state2] must be [automaton]'s states.\n  Raises : [l] must be in the [automaton]'s alphabet.\n\n  If the transition is already in [automaton], does nothing *)\nval add_transitions : t -> (int * Stt.Typ.t * int) list -> t\n(** [add_transitions automaton transitions] adds several transitions in [automaton] *)\nval add_start : t -> int -> t\n(** [add_start automaton state] sets [state] as a start state in [automaton].\n  If it's already the case, does nothing\n\n  Raise : [state] must be an [automaton]'s state *)\nval add_starts : t -> int list -> t\n(** [add_starts automaton states] sets several states as start states in [automaton] *)\nval add_end : t -> int -> t\n(** [add_end automaton state] sets [state] as an end state in [automaton].\n  If it's already the case, does nothing\n\n  Raise : [state] must be an [automaton]'s state *)\nval add_ends : t -> int list -> t\n(** [add_ends automaton states] sets several states as end states in [automaton] *)\n\n\nval to_dot : t -> string -> unit\n(** [to_dot automaton file_name] creates a dot file named \"[file_name].dot\"\n  representing [automaton] *)\n\n\nval determinize : t -> t\n(** [determinize automaton] returns an automaton which is the DFA version of [automaton].\n  If [automaton] has n states, the DFA automaton has at most 2^n states.\n\n  A deterministic finite automaton (or DFA) follows these 3 rules :\n  - Has one start state ;\n  - Has no epsilon-transitions ;\n  - For all states, there exists one and only one transition labelled by a same letter from it.\n     For instance, if we have (1, \"a\", 2) and (1, \"a\", 3), then it isn't deterministic *)\n(* val get_rid_of_unreachable_states : t -> t *)\n(** [get_rid_of_unreachable_states automaton] returns [automaton] without unreachable states *)\n(* val minimize : t -> t *)\n(** [minimize automaton] returns a minimized version of [automaton], the smallest possible \n\n  [automaton] must be a DFA without unreachable states *)\n\n\nval check_word : t -> Stt.Typ.t list -> bool\n(** [check_word automaton word] checks if [word] is recognized by [automaton] *)\n\n\nval to_regex_my : t -> regexp\n(** [to_regex_my automaton] returns the regex representing [automaton] using the McNaughton-Yamada method. \n  The returned value might be unsimplified *)"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.mli","languageId":"ocaml","version":0,"text":"val pp : Format.formatter -> Stt.Typ.t -> unit\n"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.mli"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/automaton/automaton.mli"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/automaton/regexp.ml","languageId":"ocaml","version":0,"text":"type t_simp =\n  | S_Empty\n  | S_Letter of Stt.Typ.t\n  | S_Concat of t_simp * t_simp\n  | S_Union of t_simp * t_simp\n  | S_Star of t_simp\ntype t_ext =\n  | Letter of Stt.Typ.t\n  | Concat of t_ext list\n  | Union of t_ext list\n  | Star of t_ext\n  | Plus of t_ext\n  | Option of t_ext\n\n\n\nlet empty = S_Empty\n\nlet is_empty (r : t_simp) : bool =\n  r = empty\n\n\n\nlet letter (t : Stt.Typ.t) : t_simp =\n  S_Letter t\n\nlet concat (r1 : t_simp) \n           (r2 : t_simp) : t_simp =\n  S_Concat (r1, r2)\n\nlet union (r1 : t_simp) \n          (r2 : t_simp) : t_simp =\n  S_Union (r1, r2)\n\nlet star (r : t_simp) : t_simp =\n  S_Star r\n\n\n\nlet rec simp_to_ext (r : t_simp) : t_ext =\n  match r with\n  | S_Empty -> failwith \"Can't convert the empty regex\"\n  | S_Letter t -> Letter t\n  | S_Concat (r1, r2) -> Concat [simp_to_ext r1; simp_to_ext r2]\n  | S_Union (r1, r2) -> Union [simp_to_ext r1; simp_to_ext r2]\n  | S_Star r -> Star (simp_to_ext r)\n\n\n\nlet rec flatten (r : t_ext) : t_ext =\n  match r with\n  | Letter _ -> r\n  | Concat l ->\n    let rec loop (l : t_ext list) : t_ext list =\n      match l with\n      | [] -> []\n      | r :: l ->\n        begin\n          match r with\n          | Concat ll ->\n            List.append ll @@ loop l\n          | _ -> r :: loop l\n        end\n    in\n    Concat (loop @@ List.map flatten l)\n  | Union l ->\n    let rec loop (l : t_ext list) : t_ext list =\n      match l with\n      | [] -> []\n      | r :: l ->\n        begin\n          match r with\n          | Union ll ->\n            List.append ll @@ loop l\n          | _ -> r :: loop l\n        end\n    in\n    Union (loop @@ List.map flatten l)\n  | Star r -> Star (flatten r)\n  | Plus r -> Plus (flatten r)\n  | Option r -> Option (flatten r)\n\nlet pp (r : t_ext) : string =\n  let rec loop (r : t_ext) : string =\n    match r with\n    | Letter t ->\n      Format.asprintf \"%a\" Pretty.pp t\n    | Concat l ->\n      String.concat \";\" @@ List.map loop l\n    | Union l ->\n      \"(\" ^ (String.concat \"|\" @@ List.map loop l) ^ \")\"\n    | Star r -> (\n        match r with\n        | Letter _\n        | Union _ -> loop r ^ \"*\"\n        | _ -> \"(\" ^ loop r ^ \")*\"\n      )\n    | Plus r -> (\n        match r with\n        | Letter _\n        | Union _ -> loop r ^ \"+\"\n        | _ -> \"(\" ^ loop r ^ \")+\"\n      )\n    | Option r -> (\n        match r with\n        | Letter _\n        | Union _ -> loop r ^ \"?\"\n        | _ -> \"(\" ^ loop r ^ \")?\"\n      )\n  in\n  loop @@ flatten r\n\n\nlet get_rid_of_duplicate (l : 'a list) : 'a list =\n  List.rev @@ List.fold_left (\n    fun (acc : 'a list)\n        (elt : 'a) : 'a list ->\n      if List.mem elt acc then\n        acc\n      else\n        elt :: acc\n  )\n  [] l\n\nlet simplify (r : t_ext) : t_ext =\n  let rec simp (r : t_ext) : t_ext =\n    match r with\n    | Letter _ -> r\n    | Concat l ->\n      let l = List.map simp l in\n      let rec loop (l : t_ext list) : t_ext list =\n        match l with\n        | []\n        | _ :: [] -> l\n        | r1 :: r2 :: l ->\n          match r1, r2 with\n          | Star rr1, Star rr2 ->\n            if rr1 = rr2 then\n              loop @@ (Star rr1) :: l\n            else\n              List.cons r1 @@ loop @@ r2 :: l\n          | Star rr1, rr2\n          | rr1, Star rr2 ->\n            if rr1 = rr2 then\n              loop @@ (simp @@ Plus rr1) :: l\n            else\n              List.cons r1 @@ loop @@ r2 :: l\n          | Letter lt1, Letter lt2 ->\n              if Stt.Typ.is_empty lt1 then\n                loop @@ r2 :: l\n              else if Stt.Typ.is_empty lt2 then\n                loop @@ r1 :: l\n              else\n                List.cons r1 @@ loop @@ r2 :: l\n          | Letter lt, _ ->\n            if Stt.Typ.is_empty lt then\n              loop @@ r2 :: l\n            else\n              List.cons r1 @@ loop @@ r2 :: l\n          | _, Letter lt ->\n            if Stt.Typ.is_empty lt then\n              loop @@ r1 :: l\n            else\n              List.cons r1 @@ loop @@ r2 :: l\n          | _ ->\n            List.cons r1 @@ loop @@ r2 :: l\n      in\n      ( \n        match loop l with\n        | [] -> failwith \"Empty concat is impossible\"\n        | r :: [] -> r\n        | l -> Concat l \n      )\n    | Union l ->\n      let unique_l = get_rid_of_duplicate @@ List.map simp l\n      in\n      (\n        match unique_l with\n        | [] -> failwith \"Empty union is impossible\"\n        | r :: [] -> r\n        | _ -> (\n          let (all_eps, without_eps) = List.partition (\n            fun (r : t_ext) : bool ->\n              match r with \n              | Letter lt -> Stt.Typ.is_empty lt \n              | _ -> false\n          ) \n          unique_l\n          in\n\n          (* Returns the prefix and what it comes next *)\n          let calc_prefix (r : t_ext) : t_ext option * t_ext option =\n            match r with\n            | Concat l -> (\n              match l with\n              | [] -> None, None\n              | r' :: next -> Some r', Some (Concat next)\n            )\n            | Plus r -> Some r, Some (Star r)\n            | _ -> Some r, None\n          in\n          (* Returns the suffix and what it comes before *)\n          let rec calc_suffix (r : t_ext) : t_ext option * t_ext option =\n            match r with\n            | Concat l -> (\n              match l with\n              | [] -> None, None\n              | r :: [] -> Some r, None \n              | r' :: next -> \n                let (suff, before) = calc_suffix @@ Concat next in\n                match before with\n                | None -> suff, Some r'\n                | Some before -> suff, Some (flatten @@ Concat [r'; before])\n            )\n            | Plus r -> Some (Star r), Some r\n            | _ -> Some r, None\n          in\n          (* Factorize \n\n              The boolean tells us if we can simplify the result, i.e\n                it has been factorized, thus changed (it prevents \n                looping infinitely when simplifying the new expression)\n          *)\n          let factorize (r : t_ext) : t_ext * bool =\n            let aux (r : t_ext)\n                    (calc : t_ext -> t_ext option * t_ext option)\n                    (concat_factors : t_ext -> t_ext -> t_ext)\n                    (factorize : t_ext -> t_ext list -> t_ext) : t_ext * bool =\n              match r with\n              | Union l ->\n                (* list of all regexp without the common factor *)\n                let max_left = ref l in\n                (* greatest common factor found *)\n                let max_factor = ref None in\n                let factor_not_found = ref true in\n                let has_been_factorized = ref false in\n                let () =\n                  while !factor_not_found do\n                    let all_factors, all_left = List.split\n                      @@ List.map calc !max_left\n                    in\n                    match get_rid_of_duplicate all_factors with\n                    | [] -> assert false (* No factor : issue *)\n                    | Some factor :: [] -> (\n                      has_been_factorized := true ;\n                      max_left := List.map (\n                        fun (left : t_ext option) : t_ext ->\n                          match left with\n                          | None -> Letter Stt.Typ.empty\n                          | Some r -> r\n                      )\n                      all_left ;\n                      match !max_factor with\n                      | None -> max_factor := Some factor    \n                      | Some old_factor -> \n                        max_factor := Some (concat_factors old_factor factor)\n                    )\n                    | None :: [] (* No factor found *)\n                    | _ -> factor_not_found := false (* More than one factor *)\n                  done\n                in \n                (\n                  match !max_factor with\n                  | None -> r, false\n                  | Some factor -> factorize factor !max_left, !has_been_factorized\n                )\n              | _ -> r, false\n            in\n            let r, is_factorized = aux r calc_prefix\n            (\n              fun (old_factor : t_ext)\n                  (factor : t_ext) : t_ext ->\n                Concat [ old_factor ; factor ]\n            )\n            (\n              fun (prefix : t_ext)\n                  (left : t_ext list) : t_ext ->\n                Concat [ prefix; Union left ]\n            )\n            in\n            let r, is_factorized' =  aux r calc_suffix\n            (\n              fun (old_factor : t_ext)\n                  (factor : t_ext) : t_ext ->\n                Concat [ factor ; old_factor ]\n            )\n            (\n              fun (suffix : t_ext)\n                  (left : t_ext list) : t_ext ->\n                Concat [ Union left; suffix ]\n            )\n            in\n            r, is_factorized || is_factorized'\n          in\n          match all_eps with \n          | [] -> (* no epsilon *)\n            let res, is_factorized = factorize @@ Union without_eps in\n            if is_factorized then (* else it will loop without an end *)\n              flatten @@ simp res\n            else \n              res\n          | _ -> (* at least one (singleton because we got rid of duplicates) *)\n            match without_eps with\n            | [] -> Letter Stt.Typ.empty (* it was an union of espilon (why not) *)\n            | r :: [] -> simp @@ Option r\n            | _ -> \n              let res, is_factorized = factorize @@ Union without_eps in\n              if is_factorized then\n                simp @@ Option (flatten @@ res)\n              else\n                simp @@ Option res\n\n        )\n      )\n    | Star r ->\n      begin\n        match simp r with\n        | Letter l ->\n          if Stt.Typ.is_empty l then\n            Letter l\n          else\n            Star (Letter l)\n        | Star r\n        | Plus r\n        | Option r -> Star r\n        | r -> Star r\n      end\n    | Plus r ->\n      begin\n        match simp r with\n        | Letter l ->\n          if Stt.Typ.is_empty l then\n            Letter l\n          else\n            Plus (Letter l)\n        | Star r\n        | Option r -> Star r\n        | Plus r -> Plus r\n        | r -> Plus r\n      end\n    | Option r ->\n      begin\n        match simp r with\n        | Letter l ->\n          if Stt.Typ.is_empty l then\n            Letter l\n          else\n            Option (Letter l)\n        | Star r\n        | Plus r -> Star r\n        | Option r -> Option r\n        | r -> Option r\n      end\n  in\n  simp @@ flatten r"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/automaton/automaton.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/automaton/regexp.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/automaton/automaton.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":15}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0429153442383ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":17}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":15}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":4},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype regexp = Tmp/Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":5},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype regexp = TmpRegexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":6},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\ntype regexp = Tmp.Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":18}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":12}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":18}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":4,"character":18},"end":{"line":4,"character":18}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 15, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":14}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":4,"character":18},"end":{"line":4,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":3,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":2,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":2,"character":15},"end":{"line":2,"character":15}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 22, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":7},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\n\ntype regexp = Tmp.Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":9},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmo\ntype regexp = Tmp.Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0290870666504ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":24}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":2}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 25, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":25}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":14},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule \ntype regexp = Tmp.Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":7}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":18},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule rege\ntype regexp = Tmp.Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 27, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":19},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule reg\ntype regexp = Tmp.Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":10}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 28, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":28}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":25},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Reg\ntype regexp = Tmp.Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 29, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":29}}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 30, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":30}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":30},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp =\ntype regexp = Tmp.Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":14}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 31, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":31}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":31},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = \ntype regexp = Tmp.Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":16}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 32, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":35},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.\ntype regexp = Tmp.Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 33, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":20}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 34, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":34}}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":20}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 35, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":37},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Te\ntype regexp = Tmp.Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 36, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":22}}}
[server] Got a method textDocument/completion
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 37, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 38, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":40},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.R\ntype regexp = Tmp.Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":21}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 39, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":45},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Tmp.Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 40, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":26}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 41, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":41}}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":26}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 42, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":5,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":5,"character":18},"end":{"line":5,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 44, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":49},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":5,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 45, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":14}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 46, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":14}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 47, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":14}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0360012054443ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 48, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":49,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 49, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":7}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 50, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":53},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule rec Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":4,"character":11},"end":{"line":4,"character":11}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0441074371338ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 51, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":52,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 52, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":53,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":4,"character":11},"end":{"line":4,"character":11}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 53, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":54,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":4,"character":11},"end":{"line":4,"character":11}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 54, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":55,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":9,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 55, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":56,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":9,"character":17},"end":{"line":9,"character":17}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 56, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":57,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 57, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":58,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":4,"character":10},"end":{"line":4,"character":10}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 58, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":54},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule recRegexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":57},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":59,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 59, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":60,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":7}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 60, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":61,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":7}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 61, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":62,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":20,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 62, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":63,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":20,"character":26},"end":{"line":20,"character":26}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 63, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":64,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 64, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":65,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 65, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":58},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\n\ntype regexp = Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":66,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":5,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.075101852417ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 66, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":59},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":67,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":4,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 67, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":60},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\n\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":68,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0181198120117ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 68, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":61},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nm\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":69,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 69, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":69}}
Read message 
{"jsonrpc":"2.0","id":70,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 70, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":71,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":1}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 71, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":65},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodul\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":72,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":4}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 72, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":73,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 73, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":67},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule \n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":74,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":7}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 74, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":69},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Au\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":75,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":8}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 75, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":75}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":76,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 76, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":76},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":77,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 77, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":78,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":16}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 78, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":78}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":79,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":16}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 79, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":79}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":77},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton \n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":80,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":17}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 80, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":80}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":79},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = \n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":81,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":19}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 81, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":82,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 82, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":80},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = T\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":83,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":20}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 83, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":83}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":84,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":20}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 84, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":83},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":85,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 85, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":85},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Au\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":86,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":24}}}
[server] Got a method textDocument/completion
[server] processing took 0.158071517944ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 86, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":86}}
Read message 
{"jsonrpc":"2.0","id":87,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":24}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 87, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":88,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 88, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":92},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaonb\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":99},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automato\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":89,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 89, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":100},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":90,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":32}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 90, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":90}}
Read message 
{"jsonrpc":"2.0","id":91,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":32}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 91, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":92,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 92, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":93,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":6,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 93, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":94,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":6,"character":7},"end":{"line":6,"character":16}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 94, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":95,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":257,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 95, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":96,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":257,"character":40},"end":{"line":257,"character":40}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 96, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":104},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        le\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":97,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":9}}}
[server] Got a method textDocument/completion
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 97, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":97}}
Read message 
{"jsonrpc":"2.0","id":98,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":10}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 98, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":98}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":107},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":99,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":12}}}
[server] Got a method textDocument/completion
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 99, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":99}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":108},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _ \n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":100,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":14}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 100, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":113},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":101,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 101, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":115},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _au\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":102,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":14}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 102, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":103,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 103, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":119},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _du\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":104,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":15}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 104, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":120},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dum\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":105,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":16}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 105, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":122},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":106,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":18}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 106, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":107,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 107, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":128},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":108,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":17}}}
[server] Got a method textDocument/completion
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 108, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":109,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 109, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":129},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy \n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":110,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":19}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 110, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":111,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 111, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":130},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy =\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":112,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 112, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":131},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = \n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":113,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":21}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 113, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":132},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":114,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 114, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":133},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":115,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":31}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 115, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":138},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":116,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 116, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":139},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.emptyi\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":117,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":37}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 117, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":141},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty \n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":118,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":37}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 118, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":143},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":119,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":39}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 119, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":119}}
Read message 
{"jsonrpc":"2.0","id":120,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":39}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 120, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":121,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00286102294922ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 121, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":122,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":258,"character":39},"end":{"line":258,"character":39}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 122, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":123,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":257,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 123, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":124,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":257,"character":40},"end":{"line":257,"character":40}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 124, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":125,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":258,"character":39},"end":{"line":258,"character":39}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 125, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":126,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":268,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 126, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":127,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":268,"character":13},"end":{"line":268,"character":13}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 127, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":128,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":279,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 128, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":129,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":279,"character":7},"end":{"line":279,"character":7}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 129, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":145},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n    \n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":130,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 130, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":146},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  \n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":131,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 131, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":147},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  z\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":132,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":3}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 132, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":148},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  zn\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":133,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":4}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 133, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":151},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  znd p\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":134,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":6}}}
[server] Got a method textDocument/completion
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 134, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":152},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  znd pr\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":135,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":8}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 135, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":136,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 136, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":160},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  an\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":137,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":3}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 137, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":137}}
Read message 
{"jsonrpc":"2.0","id":138,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":3}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 138, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":162},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and \n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":139,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":6}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 139, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":163},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and p\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":140,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":7}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 140, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":165},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":141,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 141, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":169},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_erge\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":142,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":12}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 142, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":142}}
Read message 
{"jsonrpc":"2.0","id":143,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":12}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 143, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":171},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_ergexp\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":144,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 144, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":145,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":15}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 145, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":145}}
Read message 
{"jsonrpc":"2.0","id":146,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":15}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 146, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":147,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 147, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":148,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":11},"end":{"line":280,"character":11}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 148, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":175},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":149,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 149, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":176},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp \n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":150,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":16}}}
[server] Got a method textDocument/completion
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 150, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":150}}
Read message 
{"jsonrpc":"2.0","id":151,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":16}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 151, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":177},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp ()\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":152,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":17},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 152, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":153,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 153, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":154,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 154, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":155,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":18},"end":{"line":280,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 155, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":178},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp () \n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":156,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":19}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 156, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":156}}
Read message 
{"jsonrpc":"2.0","id":157,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":19}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 157, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":179},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp () =\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":158,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 158, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":159,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 159, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":160,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":18},"end":{"line":280,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 160, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":180},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp ( =\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":161,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":17},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 161, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":162,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 162, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":181},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp  =\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":163,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 163, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":182},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":164,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":17}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 164, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":164}}
Read message 
{"jsonrpc":"2.0","id":165,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":17}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 165, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":166,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 166, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":167,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 167, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":168,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":19},"end":{"line":280,"character":19}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 168, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":183},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = \n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":169,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":20}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 169, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":169}}
Read message 
{"jsonrpc":"2.0","id":170,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":20}}}
[server] Got a method textDocument/completion
[server] processing took 0.0169277191162ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 170, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":171,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 171, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":185},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Re\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":172,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":22}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 172, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":172}}
Read message 
{"jsonrpc":"2.0","id":173,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":22}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 173, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":174,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0278949737549ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 174, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":189},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":175,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":26}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 175, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":175}}
Read message 
{"jsonrpc":"2.0","id":176,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":26}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 176, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":177,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 177, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":190},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":178,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":27}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 178, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":178}}
Read message 
{"jsonrpc":"2.0","id":179,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":27}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 179, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":180,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 180, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":191},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.letter\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":181,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 181, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":192},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.letter \n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":182,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":34}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 182, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":182}}
Read message 
{"jsonrpc":"2.0","id":183,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":34}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 183, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":193},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.letter S\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":184,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":35}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 184, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":184}}
Read message 
{"jsonrpc":"2.0","id":185,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":35}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 185, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":186,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 186, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":196},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.letter Stt.\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":187,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":38}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 187, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":187}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":188,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":38}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 188, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":203},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.letter Stt.Typ.ant\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":189,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 189, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":190,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":45}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 190, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":205},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.letter Stt.Typ.any\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":191,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 191, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":192,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00977516174316ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 192, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":193,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":12},"end":{"line":280,"character":12}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 193, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":194,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 194, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":195,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":16},"end":{"line":280,"character":16}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 195, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":196,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 196, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":197,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":38},"end":{"line":280,"character":38}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 197, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":198,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 198, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":199,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":34},"end":{"line":280,"character":41}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 199, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":206},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.letter .any\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":200,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 200, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":207},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Stt.TypRegexp.letter .any\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":201,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 201, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":208},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Stt.Typ(Regexp.letter .any\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":202,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":28},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00977516174316ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 202, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":203,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 203, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":204,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 204, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":205,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":43},"end":{"line":280,"character":43}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 205, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":209},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Stt.Typ(Regexp.letter any\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":206,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 206, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":210},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Stt.Typ(Regexp.letter .any\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":207,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 207, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":208,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":27},"end":{"line":280,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 208, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":211},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Stt.TypRegexp.letter .any\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":212},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.letter .any\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":209,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 209, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":210,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 210, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":211,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":34},"end":{"line":280,"character":41}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 211, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":213},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.letter Stt.Typ.any\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":212,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 212, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":213,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":27},"end":{"line":280,"character":33}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00977516174316ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 213, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":217},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.con Stt.Typ.any\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":214,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":30}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 214, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":219},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.conca Stt.Typ.any\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":215,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":31}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 215, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":215}}
Read message 
{"jsonrpc":"2.0","id":216,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":31}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 216, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":220},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.concat Stt.Typ.any\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":217,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":33}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 217, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":217}}
Read message 
{"jsonrpc":"2.0","id":218,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":33}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 218, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":219,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 219, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":220,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 220, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":221,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":45},"end":{"line":280,"character":45}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 221, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":221},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.concat Stt.Typ.any \n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":222,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":46}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 222, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":222}}
Read message 
{"jsonrpc":"2.0","id":223,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":46}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 223, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":224},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.concat Stt.Typ.any Stt\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":224,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":48}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 224, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":224}}
Read message 
{"jsonrpc":"2.0","id":225,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":49}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 225, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":226,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 226, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":225},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.concat Stt.Typ.any Stt.\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":227,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":50}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 227, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":226},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.concat Stt.Typ.any Stt.T\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":228,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":51}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 228, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":228}}
Read message 
{"jsonrpc":"2.0","id":229,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":51}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 229, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":228},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.concat Stt.Typ.any Stt.Typ\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":230,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":53}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 230, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":231,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":53}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 231, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":231}}
Read message 
{"jsonrpc":"2.0","id":232,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":53}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 232, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":229},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.concat Stt.Typ.any Stt.Typ.\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":233,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 233, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":234,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":54}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 234, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":234}}
Read message 
{"jsonrpc":"2.0","id":235,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":54}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 235, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":234},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.concat Stt.Typ.any Stt.Typ.empty\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":236,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":59}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 236, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":237,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 237, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":238,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":46},"end":{"line":280,"character":59}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 238, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":236},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.concat Stt.Typ.any t\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":239,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":47}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 239, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":240,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 240, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":241,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":35},"end":{"line":280,"character":35}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 241, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":242,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 242, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":237},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.concat (Stt.Typ.any t\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":243,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":35},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 243, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":244,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 244, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":245,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":46},"end":{"line":280,"character":46}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 245, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":246,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 246, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":247,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":34},"end":{"line":280,"character":34}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 247, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":238},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.concat Stt.Typ.any t\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":240},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.concat (Stt.Typ.any (t\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":248,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":35},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 248, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":249,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 249, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":250,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 250, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":251,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":35},"end":{"line":280,"character":35}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 251, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":254},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.concat (letter Stt.Typ.any (letter t\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":252,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00977516174316ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 252, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":253,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 253, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":254,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":49},"end":{"line":280,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 254, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":255,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":53}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 255, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":256,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":53},"end":{"line":280,"character":53}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 256, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":256},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.concat (letter Stt.Typ.any) (letter t)\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":257,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":54}}}
[server] Got a method textDocument/completion
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 257, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":257}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":258,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":54}}}
[server] Got a method textDocument/completion
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 258, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":259,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 259, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":260,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":65}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 260, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":261,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":27},"end":{"line":280,"character":65}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 261, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":258},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let _ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":262,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":28},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 262, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":263,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":66}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 263, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":264,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 264, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":265,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":12},"end":{"line":280,"character":12}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 265, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":266,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":257,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 266, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":267,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":257,"character":13},"end":{"line":257,"character":13}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 267, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":259},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        let _dummy = Automaton.empty in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":268,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":257,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 268, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":269,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":257,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 269, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":270,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":257,"character":39},"end":{"line":258,"character":39}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 270, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":260},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n        acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":271,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":257,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 271, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":272,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 272, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":273,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":32},"end":{"line":262,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 273, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":274,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":262,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 274, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":275,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":262,"character":43},"end":{"line":263,"character":11}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 275, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":261},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        (* if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":276,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":262,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 276, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":277,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 277, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":278,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":258,"character":7},"end":{"line":262,"character":43}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 278, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":279,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 279, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":280,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":258,"character":8},"end":{"line":262,"character":43}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 280, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":263},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          tp :: acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":281,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 281, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":282,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":263,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 282, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":283,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":263,"character":9},"end":{"line":263,"character":9}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 283, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":284,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":259,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 284, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":285,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":259,"character":19},"end":{"line":259,"character":19}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 285, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":286,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":259,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 286, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":287,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":259,"character":10},"end":{"line":259,"character":10}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 287, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":288,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":244,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 288, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":289,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":244,"character":10},"end":{"line":244,"character":10}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 289, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":290,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":259,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 290, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":291,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":259,"character":19},"end":{"line":259,"character":19}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 291, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":265},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":292,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":259,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 292, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":268},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          a\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":293,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":260,"character":11}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 293, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":293}}
Read message 
{"jsonrpc":"2.0","id":294,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":260,"character":11}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 294, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":270},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":295,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":260,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 295, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":296,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":260,"character":13}}}
[server] Got a method textDocument/completion
[server] processing took 0.0219345092773ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 296, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":296}}
Read message 
{"jsonrpc":"2.0","id":297,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":260,"character":13}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 297, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":298,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":263,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 298, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":299,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":263,"character":40},"end":{"line":263,"character":40}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 299, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":300,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 300, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":301,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":9},"end":{"line":263,"character":40}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 301, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":302,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":262,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 302, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":303,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":262,"character":10},"end":{"line":263,"character":40}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 303, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":272},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":304,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":262,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 304, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":305,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":263,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 305, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":306,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":263,"character":40},"end":{"line":263,"character":40}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 306, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":307,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":263,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 307, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":308,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":263,"character":43},"end":{"line":263,"character":43}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 308, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":274},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          \n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":309,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 309, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":275},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          a\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":310,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":11}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 310, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":310}}
Read message 
{"jsonrpc":"2.0","id":311,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":11}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 311, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":277},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":312,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 312, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":313,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":13}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 313, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":313}}
Read message 
{"jsonrpc":"2.0","id":314,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":10}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 314, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":315,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 315, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":316,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":264,"character":10},"end":{"line":264,"character":10}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 316, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":279},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          : acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":317,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 317, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":282},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":318,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 318, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":319,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 319, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":320,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":264,"character":10},"end":{"line":264,"character":10}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 320, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":283},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          r:: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":321,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":11}}}
[server] Got a method textDocument/completion
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 321, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":321}}
Read message 
{"jsonrpc":"2.0","id":322,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":11}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 322, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":323,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 323, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":285},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (:: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":324,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":11},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 324, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":325,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 325, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":287},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (re:: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":326,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":12}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 326, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":326}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":327,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":13}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 327, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":291},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (regexp:: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":328,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 328, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":329,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":17}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 329, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":329}}
Read message 
{"jsonrpc":"2.0","id":330,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":17}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 330, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":292},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (egexp:: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":331,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":11},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 331, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":293},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (Regexp:: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":332,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 332, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":333,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":264,"character":17},"end":{"line":264,"character":17}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 333, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":294},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (Regexp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":334,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":18}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 334, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":334}}
Read message 
{"jsonrpc":"2.0","id":335,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":18}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 335, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":336,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 336, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":337,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 337, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":338,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":6},"end":{"line":280,"character":15}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 338, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":339,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 339, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":340,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":264,"character":18},"end":{"line":264,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 340, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":295},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (Regexp pr_regexp:: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":341,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 341, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":296},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (Regexp pr_regexp :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":342,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":28}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 342, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":342}}
Read message 
{"jsonrpc":"2.0","id":343,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":28}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 343, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":299},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (Regexp pr_regexp ts):: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":344,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0200271606445ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 344, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":345,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":31}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 345, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":345}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":300},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (Regexp pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":346,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":32}}}
[server] Got a method textDocument/completion
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 346, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":347,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 347, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":348,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 348, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":349,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":264,"character":29},"end":{"line":264,"character":29}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 349, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":350,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 350, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":351,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":264,"character":18},"end":{"line":264,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 351, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":303},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (Regexp @@ pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":352,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 352, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":304},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (Regexp @@pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":353,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 353, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":307},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":354,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":19},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 354, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":355,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 355, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":356,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":264,"character":32},"end":{"line":264,"character":32}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 356, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":357,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 357, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":358,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":264,"character":29},"end":{"line":264,"character":29}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 358, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":308},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (Regexp (pr_regexp )ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":359,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 359, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":360,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":264,"character":32},"end":{"line":264,"character":32}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 360, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":361,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 361, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":362,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":264,"character":29},"end":{"line":264,"character":29}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 362, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":309},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":363,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 363, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":364,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":264,"character":31},"end":{"line":264,"character":31}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 364, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":365,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 365, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":366,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":264,"character":32},"end":{"line":264,"character":32}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 366, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":310},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (Regexp (pr_regexp ts)) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":367,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 367, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":311},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          (Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":368,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 368, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":369,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":264,"character":18},"end":{"line":264,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 369, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":370,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 370, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":371,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":264,"character":11},"end":{"line":264,"character":11}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 371, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":312},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":372,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":264,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 372, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":373,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":263,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 373, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":374,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":263,"character":33},"end":{"line":263,"character":33}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 374, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":375,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":263,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 375, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":376,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":229,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 376, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":377,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":228,"character":0},"end":{"line":229,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 377, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":378,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":183,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 378, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":379,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":183,"character":4},"end":{"line":183,"character":13}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 379, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":380,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":183,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 380, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":381,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":183,"character":9},"end":{"line":183,"character":9}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 381, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":382,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":183,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 382, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":383,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":183,"character":4},"end":{"line":183,"character":4}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 383, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":316},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet rec decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":384,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":183,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 384, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":385,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":183,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 385, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":386,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":183,"character":8},"end":{"line":183,"character":17}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 386, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":387,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":183,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 387, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":388,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":183,"character":7},"end":{"line":183,"character":7}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 388, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":317},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet recdecompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":320},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":389,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":183,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 389, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":390,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":186,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 390, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":391,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":186,"character":1},"end":{"line":186,"character":1}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 391, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":392,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":257,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 392, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":393,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":257,"character":22},"end":{"line":257,"character":22}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 393, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":394,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 394, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":395,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":20},"end":{"line":280,"character":20}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 395, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":396,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 396, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":322},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = \n  Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":397,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 397, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":323},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t = \n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":398,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 398, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":399,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 399, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":400,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":17},"end":{"line":280,"character":17}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 400, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":401,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 401, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":402,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":19},"end":{"line":280,"character":19}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 402, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":325},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n   \n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":403,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 403, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":326},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n     \n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":404,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 404, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":330},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n     (*  *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":331},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (*  *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":405,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 405, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":347},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* Placer horld *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":406,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 406, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":354},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* Placer holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":407,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 407, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":408,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":19},"end":{"line":280,"character":19}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0200271606445ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 408, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":409,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 409, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":410,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":281,"character":14},"end":{"line":281,"character":14}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 410, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":355},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":411,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 411, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":412,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":280,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 412, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":413,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":280,"character":19},"end":{"line":280,"character":19}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 413, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":360},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n\n  \n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":414,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":282,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 414, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":361},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n  \n  \n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":415,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 415, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":367},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (*  *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":416,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 416, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":417,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":281,"character":7},"end":{"line":281,"character":7}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 417, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":382},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* Need to use p *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":418,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 418, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":386},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* Need to use pr_de *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":419,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 419, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":388},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* Need to use pr_desc *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":420,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 420, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":391},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* Need to use pr_descr () *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":421,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":29},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 421, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":393},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* Need to use pr_descr (wh) *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":422,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 422, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":395},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* Need to use pr_descr (why?) *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":423,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 423, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":402},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* Need to use pr_descr (why?) \n\n  *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":424,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":283,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 424, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":403},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* Need to use pr_descr (why?) \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":425,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 425, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":426,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":281,"character":4},"end":{"line":281,"character":4}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 426, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":427,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":281,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 427, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":428,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":281,"character":11},"end":{"line":281,"character":11}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 428, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":409},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      Need to use pr_descr (why?) \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":429,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":283,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 429, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":411},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?) \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":430,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":283,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 430, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":431,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":283,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 431, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":432,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":283,"character":34},"end":{"line":283,"character":34}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 432, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":413},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n       \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":433,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0250339508057ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 433, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":414},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":434,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 434, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":421},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be w \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":435,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 435, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":428},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware  \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":436,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 436, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":440},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":437,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 437, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":442},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables () \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":438,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":31},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 438, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":439,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 439, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":443},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (s) \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":440,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 440, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":444},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables () \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":441,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":31},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 441, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":447},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":442,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0419616699219ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 442, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":449},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables '' \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":443,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 443, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":452},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables () \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":444,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":31},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 444, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":466},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid) \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":445,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 445, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":469},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of) \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":446,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":48}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 446, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":474},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of them) \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":447,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":53}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 447, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":475},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of them/) \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":448,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 448, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":476},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of them/n) \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":449,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":55}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 449, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":481},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of them/igno) \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":450,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":58}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 450, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":488},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of them/ignore them) \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":451,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":65}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 451, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":452,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 452, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":453,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":284,"character":49},"end":{"line":284,"character":49}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 453, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":454,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":53}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 454, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":455,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":284,"character":53},"end":{"line":284,"character":53}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 455, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":456,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 456, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":457,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":284,"character":49},"end":{"line":284,"character":53}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 457, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":490},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them) \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":458,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":55}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 458, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":459,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":55}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 459, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":460,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":284,"character":55},"end":{"line":284,"character":55}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 460, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":461,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":60}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 461, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":462,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":284,"character":60},"end":{"line":284,"character":60}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00977516174316ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 462, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":492},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them??) \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":463,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":62}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 463, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":493},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?) \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":464,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":61}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 464, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":465,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":284,"character":62}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 465, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":466,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":284,"character":62},"end":{"line":284,"character":62}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 466, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":498},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n       \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":467,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":286,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 467, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":505},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":468,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":286,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 468, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":508},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to re \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":469,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":286,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 469, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":514},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink  \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":470,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":286,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 470, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":528},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\nmodule Automaton = Tmp.Automaton\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":471,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":286,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 471, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":472,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":286,"character":36},"end":{"line":286,"character":36}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 472, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":473,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":286,"character":36},"end":{"line":286,"character":36}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 473, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":474,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":286,"character":36},"end":{"line":286,"character":36}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 474, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":475,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":275,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 475, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":476,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":275,"character":30},"end":{"line":275,"character":30}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 476, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":477,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":275,"character":30},"end":{"line":275,"character":30}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 477, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":478,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":275,"character":30},"end":{"line":275,"character":30}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 478, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":479,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":275,"character":30},"end":{"line":275,"character":30}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 479, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":480,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":275,"character":30},"end":{"line":275,"character":30}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 480, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":481,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":275,"character":30},"end":{"line":275,"character":30}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 481, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":482,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":275,"character":30},"end":{"line":275,"character":30}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 482, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":483,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":279,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0309944152832ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 483, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":484,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":279,"character":7},"end":{"line":279,"character":7}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 484, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":485,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":279,"character":7},"end":{"line":279,"character":7}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 485, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":486,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":279,"character":7},"end":{"line":279,"character":7}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 486, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":487,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":279,"character":7},"end":{"line":279,"character":7}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 487, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":488,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":277,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 488, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":489,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":277,"character":37},"end":{"line":277,"character":37}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 489, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":490,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":277,"character":37},"end":{"line":277,"character":37}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 490, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":491,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/automaton/automaton.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 491, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":492,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/automaton/automaton.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 492, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/automaton/automaton.ml"}}}
Read message 
{"jsonrpc":"2.0","id":493,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/automaton/regexp.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0300407409668ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 493, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/automaton/regexp.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","languageId":"ocaml","version":0,"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet to_dot (automaton : t)\n           (file_name : string) : unit =\n  let file = open_out (file_name ^ \".dot\") in\n  Printf.fprintf file \"digraph automaton\\n{\\n\" ;\n  let i = ref 0 in\n  StateSet.iter ( \n    fun (state : state) : unit -> \n      Printf.fprintf file \"  __INVISIBLE_NODE_%d__ [label= \\\"\\\", shape=none,height=.0,width=.0] ;\\n\" !i ;\n      Printf.fprintf file \"  __INVISIBLE_NODE_%d__ -> %d ;\\n\" !i state ;\n      i := !i + 1\n  ) \n  automaton.starts ;\n  StateSet.iter ( \n    fun (state : state) : unit ->\n      Printf.fprintf file \"  %d [peripheries=2] ;\\n\" state \n  ) \n  automaton.ends ;\n  (* Not TransSet iter because I want to merge all transitions between two states *)\n  StateSet.iter (\n    fun (state1 : state) : unit ->\n      StateSet.iter (\n        fun (state2 : state) : unit ->\n          let letters = List.map (\n            fun (_, letter, _ : trans) : string -> \n              Format.asprintf \"%a\" Pretty.pp letter\n          ) \n            @@ TransSet.to_list \n            @@ get_transition_between automaton.trans state1 state2 \n          in\n          let letter = String.concat \", \" letters in\n          if letter <> \"\" then \n            Printf.fprintf file \"  %d -> %d [label=\\\"%s\\\"] ;\\n\" state1 state2 letter\n      )\n      automaton.states\n  ) \n  automaton.states ;\n  Printf.fprintf file \"}\" ;\n  close_out file\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 1 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans (i+1) (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml","languageId":"ocaml","version":0,"text":"type t_simp =\n  | S_Empty\n  | S_Letter of Stt.Typ.t\n  | S_Concat of t_simp * t_simp\n  | S_Union of t_simp * t_simp\n  | S_Star of t_simp\ntype t_ext =\n  | Letter of Stt.Typ.t\n  | Concat of t_ext list\n  | Union of t_ext list\n  | Star of t_ext\n  | Plus of t_ext\n  | Option of t_ext\n\n\n\nlet empty = S_Empty\n\nlet is_empty (r : t_simp) : bool =\n  r = empty\n\n\n\nlet letter (t : Stt.Typ.t) : t_simp =\n  S_Letter t\n\nlet concat (r1 : t_simp) \n           (r2 : t_simp) : t_simp =\n  S_Concat (r1, r2)\n\nlet union (r1 : t_simp) \n          (r2 : t_simp) : t_simp =\n  S_Union (r1, r2)\n\nlet star (r : t_simp) : t_simp =\n  S_Star r\n\n\n\nlet rec simp_to_ext (r : t_simp) : t_ext =\n  match r with\n  | S_Empty -> failwith \"Can't convert the empty regex\"\n  | S_Letter t -> Letter t\n  | S_Concat (r1, r2) -> Concat [simp_to_ext r1; simp_to_ext r2]\n  | S_Union (r1, r2) -> Union [simp_to_ext r1; simp_to_ext r2]\n  | S_Star r -> Star (simp_to_ext r)\n\n\n\nlet rec flatten (r : t_ext) : t_ext =\n  match r with\n  | Letter _ -> r\n  | Concat l ->\n    let rec loop (l : t_ext list) : t_ext list =\n      match l with\n      | [] -> []\n      | r :: l ->\n        begin\n          match r with\n          | Concat ll ->\n            List.append ll @@ loop l\n          | _ -> r :: loop l\n        end\n    in\n    Concat (loop @@ List.map flatten l)\n  | Union l ->\n    let rec loop (l : t_ext list) : t_ext list =\n      match l with\n      | [] -> []\n      | r :: l ->\n        begin\n          match r with\n          | Union ll ->\n            List.append ll @@ loop l\n          | _ -> r :: loop l\n        end\n    in\n    Union (loop @@ List.map flatten l)\n  | Star r -> Star (flatten r)\n  | Plus r -> Plus (flatten r)\n  | Option r -> Option (flatten r)\n\nlet pp (r : t_ext) : string =\n  let rec loop (r : t_ext) : string =\n    match r with\n    | Letter t ->\n      Format.asprintf \"%a\" Pretty.pp t\n    | Concat l ->\n      String.concat \";\" @@ List.map loop l\n    | Union l ->\n      \"(\" ^ (String.concat \"|\" @@ List.map loop l) ^ \")\"\n    | Star r -> (\n        match r with\n        | Letter _\n        | Union _ -> loop r ^ \"*\"\n        | _ -> \"(\" ^ loop r ^ \")*\"\n      )\n    | Plus r -> (\n        match r with\n        | Letter _\n        | Union _ -> loop r ^ \"+\"\n        | _ -> \"(\" ^ loop r ^ \")+\"\n      )\n    | Option r -> (\n        match r with\n        | Letter _\n        | Union _ -> loop r ^ \"?\"\n        | _ -> \"(\" ^ loop r ^ \")?\"\n      )\n  in\n  loop @@ flatten r\n\n\nlet get_rid_of_duplicate (l : 'a list) : 'a list =\n  List.rev @@ List.fold_left (\n    fun (acc : 'a list)\n        (elt : 'a) : 'a list ->\n      if List.mem elt acc then\n        acc\n      else\n        elt :: acc\n  )\n  [] l\n\nlet simplify (r : t_ext) : t_ext =\n  let rec simp (r : t_ext) : t_ext =\n    match r with\n    | Letter _ -> r\n    | Concat l ->\n      let l = List.map simp l in\n      let rec loop (l : t_ext list) : t_ext list =\n        match l with\n        | []\n        | _ :: [] -> l\n        | r1 :: r2 :: l ->\n          match r1, r2 with\n          | Star rr1, Star rr2 ->\n            if rr1 = rr2 then\n              loop @@ (Star rr1) :: l\n            else\n              List.cons r1 @@ loop @@ r2 :: l\n          | Star rr1, rr2\n          | rr1, Star rr2 ->\n            if rr1 = rr2 then\n              loop @@ (simp @@ Plus rr1) :: l\n            else\n              List.cons r1 @@ loop @@ r2 :: l\n          | Letter lt1, Letter lt2 ->\n              if Stt.Typ.is_empty lt1 then\n                loop @@ r2 :: l\n              else if Stt.Typ.is_empty lt2 then\n                loop @@ r1 :: l\n              else\n                List.cons r1 @@ loop @@ r2 :: l\n          | Letter lt, _ ->\n            if Stt.Typ.is_empty lt then\n              loop @@ r2 :: l\n            else\n              List.cons r1 @@ loop @@ r2 :: l\n          | _, Letter lt ->\n            if Stt.Typ.is_empty lt then\n              loop @@ r1 :: l\n            else\n              List.cons r1 @@ loop @@ r2 :: l\n          | _ ->\n            List.cons r1 @@ loop @@ r2 :: l\n      in\n      ( \n        match loop l with\n        | [] -> failwith \"Empty concat is impossible\"\n        | r :: [] -> r\n        | l -> Concat l \n      )\n    | Union l ->\n      let unique_l = get_rid_of_duplicate @@ List.map simp l\n      in\n      (\n        match unique_l with\n        | [] -> failwith \"Empty union is impossible\"\n        | r :: [] -> r\n        | _ -> (\n          let (all_eps, without_eps) = List.partition (\n            fun (r : t_ext) : bool ->\n              match r with \n              | Letter lt -> Stt.Typ.is_empty lt \n              | _ -> false\n          ) \n          unique_l\n          in\n\n          (* Returns the prefix and what it comes next *)\n          let calc_prefix (r : t_ext) : t_ext option * t_ext option =\n            match r with\n            | Concat l -> (\n              match l with\n              | [] -> None, None\n              | r' :: next -> Some r', Some (Concat next)\n            )\n            | Plus r -> Some r, Some (Star r)\n            | _ -> Some r, None\n          in\n          (* Returns the suffix and what it comes before *)\n          let rec calc_suffix (r : t_ext) : t_ext option * t_ext option =\n            match r with\n            | Concat l -> (\n              match l with\n              | [] -> None, None\n              | r :: [] -> Some r, None \n              | r' :: next -> \n                let (suff, before) = calc_suffix @@ Concat next in\n                match before with\n                | None -> suff, Some r'\n                | Some before -> suff, Some (flatten @@ Concat [r'; before])\n            )\n            | Plus r -> Some (Star r), Some r\n            | _ -> Some r, None\n          in\n          (* Factorize \n\n              The boolean tells us if we can simplify the result, i.e\n                it has been factorized, thus changed (it prevents \n                looping infinitely when simplifying the new expression)\n          *)\n          let factorize (r : t_ext) : t_ext * bool =\n            let aux (r : t_ext)\n                    (calc : t_ext -> t_ext option * t_ext option)\n                    (concat_factors : t_ext -> t_ext -> t_ext)\n                    (factorize : t_ext -> t_ext list -> t_ext) : t_ext * bool =\n              match r with\n              | Union l ->\n                (* list of all regexp without the common factor *)\n                let max_left = ref l in\n                (* greatest common factor found *)\n                let max_factor = ref None in\n                let factor_not_found = ref true in\n                let has_been_factorized = ref false in\n                let () =\n                  while !factor_not_found do\n                    let all_factors, all_left = List.split\n                      @@ List.map calc !max_left\n                    in\n                    match get_rid_of_duplicate all_factors with\n                    | [] -> assert false (* No factor : issue *)\n                    | Some factor :: [] -> (\n                      has_been_factorized := true ;\n                      max_left := List.map (\n                        fun (left : t_ext option) : t_ext ->\n                          match left with\n                          | None -> Letter Stt.Typ.empty\n                          | Some r -> r\n                      )\n                      all_left ;\n                      match !max_factor with\n                      | None -> max_factor := Some factor    \n                      | Some old_factor -> \n                        max_factor := Some (concat_factors old_factor factor)\n                    )\n                    | None :: [] (* No factor found *)\n                    | _ -> factor_not_found := false (* More than one factor *)\n                  done\n                in \n                (\n                  match !max_factor with\n                  | None -> r, false\n                  | Some factor -> factorize factor !max_left, !has_been_factorized\n                )\n              | _ -> r, false\n            in\n            let r, is_factorized = aux r calc_prefix\n            (\n              fun (old_factor : t_ext)\n                  (factor : t_ext) : t_ext ->\n                Concat [ old_factor ; factor ]\n            )\n            (\n              fun (prefix : t_ext)\n                  (left : t_ext list) : t_ext ->\n                Concat [ prefix; Union left ]\n            )\n            in\n            let r, is_factorized' =  aux r calc_suffix\n            (\n              fun (old_factor : t_ext)\n                  (factor : t_ext) : t_ext ->\n                Concat [ factor ; old_factor ]\n            )\n            (\n              fun (suffix : t_ext)\n                  (left : t_ext list) : t_ext ->\n                Concat [ Union left; suffix ]\n            )\n            in\n            r, is_factorized || is_factorized'\n          in\n          match all_eps with \n          | [] -> (* no epsilon *)\n            let res, is_factorized = factorize @@ Union without_eps in\n            if is_factorized then (* else it will loop without an end *)\n              flatten @@ simp res\n            else \n              res\n          | _ -> (* at least one (singleton because we got rid of duplicates) *)\n            match without_eps with\n            | [] -> Letter Stt.Typ.empty (* it was an union of espilon (why not) *)\n            | r :: [] -> simp @@ Option r\n            | _ -> \n              let res, is_factorized = factorize @@ Union without_eps in\n              if is_factorized then\n                simp @@ Option (flatten @@ res)\n              else\n                simp @@ Option res\n\n        )\n      )\n    | Star r ->\n      begin\n        match simp r with\n        | Letter l ->\n          if Stt.Typ.is_empty l then\n            Letter l\n          else\n            Star (Letter l)\n        | Star r\n        | Plus r\n        | Option r -> Star r\n        | r -> Star r\n      end\n    | Plus r ->\n      begin\n        match simp r with\n        | Letter l ->\n          if Stt.Typ.is_empty l then\n            Letter l\n          else\n            Plus (Letter l)\n        | Star r\n        | Option r -> Star r\n        | Plus r -> Plus r\n        | r -> Plus r\n      end\n    | Option r ->\n      begin\n        match simp r with\n        | Letter l ->\n          if Stt.Typ.is_empty l then\n            Letter l\n          else\n            Option (Letter l)\n        | Star r\n        | Plus r -> Star r\n        | Option r -> Option r\n        | r -> Option r\n      end\n  in\n  simp @@ flatten r"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":494,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":162,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 494, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":495,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":162,"character":35},"end":{"line":162,"character":41}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 495, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":496,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":162,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 496, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":497,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":162,"character":44},"end":{"line":162,"character":44}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 497, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":498,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml"},"position":{"line":86,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 498, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":499,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml"},"range":{"start":{"line":86,"character":27},"end":{"line":86,"character":33}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 499, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":500,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml"},"position":{"line":86,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 500, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":501,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml"},"range":{"start":{"line":86,"character":30},"end":{"line":86,"character":30}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 501, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":502,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml"},"position":{"line":86,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 502, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":503,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml"},"range":{"start":{"line":86,"character":31},"end":{"line":86,"character":31}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 503, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":504,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":162,"character":44},"end":{"line":162,"character":44}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 504, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":505,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":135,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 505, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":506,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":135,"character":0},"end":{"line":175,"character":16}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 506, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":507,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":134,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 507, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":508,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":134,"character":18},"end":{"line":134,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 508, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":1},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 1 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans (i+1) (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":509,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":136,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 509, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":510,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":136,"character":0},"end":{"line":136,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 510, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":3},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 1 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans (i+1) (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":511,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":136,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 511, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli","languageId":"ocaml","version":0,"text":"type t\n(** The automaton type *)\ntype regexp\n(** The regexp type *)\n\nval empty : t\n(** The empty automaton *)\n\n\nval add_state : t -> int -> t\n(** [add_state automaton state] adds [state] in [automaton]. \n  If it's already a state in [automaton], does nothing *)\nval add_states : t -> int list -> t\n(** [add_states automaton states] adds several states in [automaton] *)\nval add_trans : t -> int -> Stt.Typ.t -> int -> t\n(** [add_trans automaton state1 letter state2] adds a transition labelled [letter] between [state1] and [state2] in [automaton].\n\n  Raises : [state1] and [state2] must be [automaton]'s states.\n  Raises : [l] must be in the [automaton]'s alphabet.\n\n  If the transition is already in [automaton], does nothing *)\nval add_transitions : t -> (int * Stt.Typ.t * int) list -> t\n(** [add_transitions automaton transitions] adds several transitions in [automaton] *)\nval add_start : t -> int -> t\n(** [add_start automaton state] sets [state] as a start state in [automaton].\n  If it's already the case, does nothing\n\n  Raise : [state] must be an [automaton]'s state *)\nval add_starts : t -> int list -> t\n(** [add_starts automaton states] sets several states as start states in [automaton] *)\nval add_end : t -> int -> t\n(** [add_end automaton state] sets [state] as an end state in [automaton].\n  If it's already the case, does nothing\n\n  Raise : [state] must be an [automaton]'s state *)\nval add_ends : t -> int list -> t\n(** [add_ends automaton states] sets several states as end states in [automaton] *)\n\n\nval to_dot : t -> string -> unit\n(** [to_dot automaton file_name] creates a dot file named \"[file_name].dot\"\n  representing [automaton] *)\n\n\nval determinize : t -> t\n(** [determinize automaton] returns an automaton which is the DFA version of [automaton].\n  If [automaton] has n states, the DFA automaton has at most 2^n states.\n\n  A deterministic finite automaton (or DFA) follows these 3 rules :\n  - Has one start state ;\n  - Has no epsilon-transitions ;\n  - For all states, there exists one and only one transition labelled by a same letter from it.\n     For instance, if we have (1, \"a\", 2) and (1, \"a\", 3), then it isn't deterministic *)\n(* val get_rid_of_unreachable_states : t -> t *)\n(** [get_rid_of_unreachable_states automaton] returns [automaton] without unreachable states *)\n(* val minimize : t -> t *)\n(** [minimize automaton] returns a minimized version of [automaton], the smallest possible \n\n  [automaton] must be a DFA without unreachable states *)\n\n\nval check_word : t -> Stt.Typ.t list -> bool\n(** [check_word automaton word] checks if [word] is recognized by [automaton] *)\n\n\nval to_regex_my : t -> regexp\n(** [to_regex_my automaton] returns the regex representing [automaton] using the McNaughton-Yamada method. \n  The returned value might be unsimplified *)"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli","version":1},"contentChanges":[{"text":"type t\n(** The automaton type *)\ntype regexp\n(** The regexp type *)\n\nval empty : t\n(** The empty automaton *)\n\n\nval add_state : t -> int -> t\n(** [add_state automaton state] adds [state] in [automaton]. \n  If it's already a state in [automaton], does nothing *)\nval add_states : t -> int list -> t\n(** [add_states automaton states] adds several states in [automaton] *)\nval add_trans : t -> int -> Stt.Typ.t -> int -> t\n(** [add_trans automaton state1 letter state2] adds a transition labelled [letter] between [state1] and [state2] in [automaton].\n\n  Raises : [state1] and [state2] must be [automaton]'s states.\n  Raises : [l] must be in the [automaton]'s alphabet.\n\n  If the transition is already in [automaton], does nothing *)\nval add_transitions : t -> (int * Stt.Typ.t * int) list -> t\n(** [add_transitions automaton transitions] adds several transitions in [automaton] *)\nval add_start : t -> int -> t\n(** [add_start automaton state] sets [state] as a start state in [automaton].\n  If it's already the case, does nothing\n\n  Raise : [state] must be an [automaton]'s state *)\nval add_starts : t -> int list -> t\n(** [add_starts automaton states] sets several states as start states in [automaton] *)\nval add_end : t -> int -> t\n(** [add_end automaton state] sets [state] as an end state in [automaton].\n  If it's already the case, does nothing\n\n  Raise : [state] must be an [automaton]'s state *)\nval add_ends : t -> int list -> t\n(** [add_ends automaton states] sets several states as end states in [automaton] *)\n\n\nval determinize : t -> t\n(** [determinize automaton] returns an automaton which is the DFA version of [automaton].\n  If [automaton] has n states, the DFA automaton has at most 2^n states.\n\n  A deterministic finite automaton (or DFA) follows these 3 rules :\n  - Has one start state ;\n  - Has no epsilon-transitions ;\n  - For all states, there exists one and only one transition labelled by a same letter from it.\n     For instance, if we have (1, \"a\", 2) and (1, \"a\", 3), then it isn't deterministic *)\n(* val get_rid_of_unreachable_states : t -> t *)\n(** [get_rid_of_unreachable_states automaton] returns [automaton] without unreachable states *)\n(* val minimize : t -> t *)\n(** [minimize automaton] returns a minimized version of [automaton], the smallest possible \n\n  [automaton] must be a DFA without unreachable states *)\n\n\nval check_word : t -> Stt.Typ.t list -> bool\n(** [check_word automaton word] checks if [word] is recognized by [automaton] *)\n\n\nval to_regex_my : t -> regexp\n(** [to_regex_my automaton] returns the regex representing [automaton] using the McNaughton-Yamada method. \n  The returned value might be unsimplified *)"}]}}
Read message 
{"jsonrpc":"2.0","id":512,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"},"position":{"line":36,"character":83}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 512, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":513,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"},"position":{"line":38,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 513, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":514,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"},"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 514, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli","version":2},"contentChanges":[{"text":"type t\n(** The automaton type *)\ntype regexp\n(** The regexp type *)\n\nval empty : t\n(** The empty automaton *)\n\n\nval add_state : t -> int -> t\n(** [add_state automaton state] adds [state] in [automaton]. \n  If it's already a state in [automaton], does nothing *)\nval add_states : t -> int list -> t\n(** [add_states automaton states] adds several states in [automaton] *)\nval add_trans : t -> int -> Stt.Typ.t -> int -> t\n(** [add_trans automaton state1 letter state2] adds a transition labelled [letter] between [state1] and [state2] in [automaton].\n\n  Raises : [state1] and [state2] must be [automaton]'s states.\n  Raises : [l] must be in the [automaton]'s alphabet.\n\n  If the transition is already in [automaton], does nothing *)\nval add_transitions : t -> (int * Stt.Typ.t * int) list -> t\n(** [add_transitions automaton transitions] adds several transitions in [automaton] *)\nval add_start : t -> int -> t\n(** [add_start automaton state] sets [state] as a start state in [automaton].\n  If it's already the case, does nothing\n\n  Raise : [state] must be an [automaton]'s state *)\nval add_starts : t -> int list -> t\n(** [add_starts automaton states] sets several states as start states in [automaton] *)\nval add_end : t -> int -> t\n(** [add_end automaton state] sets [state] as an end state in [automaton].\n  If it's already the case, does nothing\n\n  Raise : [state] must be an [automaton]'s state *)\nval add_ends : t -> int list -> t\n(** [add_ends automaton states] sets several states as end states in [automaton] *)\n\n\n\nval determinize : t -> t\n(** [determinize automaton] returns an automaton which is the DFA version of [automaton].\n  If [automaton] has n states, the DFA automaton has at most 2^n states.\n\n  A deterministic finite automaton (or DFA) follows these 3 rules :\n  - Has one start state ;\n  - Has no epsilon-transitions ;\n  - For all states, there exists one and only one transition labelled by a same letter from it.\n     For instance, if we have (1, \"a\", 2) and (1, \"a\", 3), then it isn't deterministic *)\n(* val get_rid_of_unreachable_states : t -> t *)\n(** [get_rid_of_unreachable_states automaton] returns [automaton] without unreachable states *)\n(* val minimize : t -> t *)\n(** [minimize automaton] returns a minimized version of [automaton], the smallest possible \n\n  [automaton] must be a DFA without unreachable states *)\n\n\nval check_word : t -> Stt.Typ.t list -> bool\n(** [check_word automaton word] checks if [word] is recognized by [automaton] *)\n\n\nval to_regex_my : t -> regexp\n(** [to_regex_my automaton] returns the regex representing [automaton] using the McNaughton-Yamada method. \n  The returned value might be unsimplified *)"}]}}
Read message 
{"jsonrpc":"2.0","id":515,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"},"position":{"line":39,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 515, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli","version":3},"contentChanges":[{"text":"type t\n(** The automaton type *)\ntype regexp\n(** The regexp type *)\n\nval empty : t\n(** The empty automaton *)\n\n\nval add_state : t -> int -> t\n(** [add_state automaton state] adds [state] in [automaton]. \n  If it's already a state in [automaton], does nothing *)\nval add_states : t -> int list -> t\n(** [add_states automaton states] adds several states in [automaton] *)\nval add_trans : t -> int -> Stt.Typ.t -> int -> t\n(** [add_trans automaton state1 letter state2] adds a transition labelled [letter] between [state1] and [state2] in [automaton].\n\n  Raises : [state1] and [state2] must be [automaton]'s states.\n  Raises : [l] must be in the [automaton]'s alphabet.\n\n  If the transition is already in [automaton], does nothing *)\nval add_transitions : t -> (int * Stt.Typ.t * int) list -> t\n(** [add_transitions automaton transitions] adds several transitions in [automaton] *)\nval add_start : t -> int -> t\n(** [add_start automaton state] sets [state] as a start state in [automaton].\n  If it's already the case, does nothing\n\n  Raise : [state] must be an [automaton]'s state *)\nval add_starts : t -> int list -> t\n(** [add_starts automaton states] sets several states as start states in [automaton] *)\nval add_end : t -> int -> t\n(** [add_end automaton state] sets [state] as an end state in [automaton].\n  If it's already the case, does nothing\n\n  Raise : [state] must be an [automaton]'s state *)\nval add_ends : t -> int list -> t\n(** [add_ends automaton states] sets several states as end states in [automaton] *)\n\n\nval determinize : t -> t\n(** [determinize automaton] returns an automaton which is the DFA version of [automaton].\n  If [automaton] has n states, the DFA automaton has at most 2^n states.\n\n  A deterministic finite automaton (or DFA) follows these 3 rules :\n  - Has one start state ;\n  - Has no epsilon-transitions ;\n  - For all states, there exists one and only one transition labelled by a same letter from it.\n     For instance, if we have (1, \"a\", 2) and (1, \"a\", 3), then it isn't deterministic *)\n(* val get_rid_of_unreachable_states : t -> t *)\n(** [get_rid_of_unreachable_states automaton] returns [automaton] without unreachable states *)\n(* val minimize : t -> t *)\n(** [minimize automaton] returns a minimized version of [automaton], the smallest possible \n\n  [automaton] must be a DFA without unreachable states *)\n\n\nval check_word : t -> Stt.Typ.t list -> bool\n(** [check_word automaton word] checks if [word] is recognized by [automaton] *)\n\n\nval to_regex_my : t -> regexp\n(** [to_regex_my automaton] returns the regex representing [automaton] using the McNaughton-Yamada method. \n  The returned value might be unsimplified *)"}]}}
Read message 
{"jsonrpc":"2.0","id":516,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"},"position":{"line":38,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 516, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":517,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"},"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":0}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 517, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":518,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"},"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 518, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":519,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":136,"character":0},"end":{"line":136,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 519, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":518}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":520,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":135,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 520, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":521,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":135,"character":0},"end":{"line":135,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 521, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":522,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":383,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 522, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":523,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":383,"character":11},"end":{"line":383,"character":11}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 523, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":524,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":443,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 524, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":525,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":443,"character":23},"end":{"line":443,"character":23}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 525, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":526,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":411,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 526, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":527,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":411,"character":14},"end":{"line":411,"character":15}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 527, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":5},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 0 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans (i+1) (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":528,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":411,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 528, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":7},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 1 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans (i+1) (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":529,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":411,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 529, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":9},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 0 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans (i+1) (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":530,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":411,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 530, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":11},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 0 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans (i) (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":531,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":444,"character":69}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 531, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":12},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 0 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans () (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":532,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":444,"character":68},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 532, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":533,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":444,"character":68}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 533, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":14},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 0 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans  (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":534,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":444,"character":67}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 534, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":16},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 0 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans i(j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":535,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":444,"character":68}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 535, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":535}}
Read message 
{"jsonrpc":"2.0","id":536,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":444,"character":68}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 536, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":537,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":444,"character":68}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 537, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":538,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":444,"character":68}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 538, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":539,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":444,"character":68},"end":{"line":444,"character":73}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 539, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":20},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 0 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans i jin\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":540,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":444,"character":70}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 540, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":21},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 0 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans i j in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":541,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":444,"character":71}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 541, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":542,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":478,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 542, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":543,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":478,"character":18},"end":{"line":478,"character":18}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 543, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":22},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 0 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans i jin\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":544,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":444,"character":70}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 544, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":26},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 0 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans i(j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":545,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":444,"character":68}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 545, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":546,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":444,"character":67}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 546, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":547,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":444,"character":67},"end":{"line":444,"character":67}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 547, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":28},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 0 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans  (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":30},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 0 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans () (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":548,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":444,"character":68},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 548, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":549,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":411,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 549, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":550,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":411,"character":14},"end":{"line":411,"character":15}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 550, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":35},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 1 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans (i+1) (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":551,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":135,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 551, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":552,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":135,"character":0},"end":{"line":135,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 552, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":36},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 1 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans (i+1) (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":37},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 1 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans (i+1) (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":553,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":136,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 553, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":554,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":411,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 554, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":555,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":411,"character":15},"end":{"line":411,"character":15}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 555, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":39},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 0 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans (i+1) (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":41},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 1 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans (i+1) (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":556,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":411,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 556, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":557,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":383,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 557, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":558,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":383,"character":20},"end":{"line":383,"character":20}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 558, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","version":43},"contentChanges":[{"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\n\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 1 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans (i+1) (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}]}}
Read message 
{"jsonrpc":"2.0","id":559,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":409,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 559, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":560,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"position":{"line":377,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 560, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":561,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":377,"character":0},"end":{"line":377,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 561, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":562,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":377,"character":0},"end":{"line":377,"character":0}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 562, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":563,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":277,"character":37},"end":{"line":277,"character":37}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 563, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":564,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":5,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 564, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":565,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":5,"character":27},"end":{"line":6,"character":32}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 565, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":529},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.(pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":566,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":5,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00977516174316ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 566, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":567,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":5,"character":27},"end":{"line":5,"character":27}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 567, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":568,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":5,"character":27},"end":{"line":5,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 568, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":569,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml"},"range":{"start":{"line":86,"character":30},"end":{"line":86,"character":30}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 569, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":570,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml"},"position":{"line":79,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 570, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":571,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml"},"range":{"start":{"line":79,"character":30},"end":{"line":79,"character":30}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 571, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli","languageId":"ocaml","version":0,"text":"type t\n(** The automaton type *)\ntype regexp\n(** The regexp type *)\n\nval empty : t\n(** The empty automaton *)\n\n\nval add_state : t -> int -> t\n(** [add_state automaton state] adds [state] in [automaton]. \n  If it's already a state in [automaton], does nothing *)\nval add_states : t -> int list -> t\n(** [add_states automaton states] adds several states in [automaton] *)\nval add_trans : t -> int -> Stt.Typ.t -> int -> t\n(** [add_trans automaton state1 letter state2] adds a transition labelled [letter] between [state1] and [state2] in [automaton].\n\n  Raises : [state1] and [state2] must be [automaton]'s states.\n  Raises : [l] must be in the [automaton]'s alphabet.\n\n  If the transition is already in [automaton], does nothing *)\nval add_transitions : t -> (int * Stt.Typ.t * int) list -> t\n(** [add_transitions automaton transitions] adds several transitions in [automaton] *)\nval add_start : t -> int -> t\n(** [add_start automaton state] sets [state] as a start state in [automaton].\n  If it's already the case, does nothing\n\n  Raise : [state] must be an [automaton]'s state *)\nval add_starts : t -> int list -> t\n(** [add_starts automaton states] sets several states as start states in [automaton] *)\nval add_end : t -> int -> t\n(** [add_end automaton state] sets [state] as an end state in [automaton].\n  If it's already the case, does nothing\n\n  Raise : [state] must be an [automaton]'s state *)\nval add_ends : t -> int list -> t\n(** [add_ends automaton states] sets several states as end states in [automaton] *)\n\n\nval determinize : t -> t\n(** [determinize automaton] returns an automaton which is the DFA version of [automaton].\n  If [automaton] has n states, the DFA automaton has at most 2^n states.\n\n  A deterministic finite automaton (or DFA) follows these 3 rules :\n  - Has one start state ;\n  - Has no epsilon-transitions ;\n  - For all states, there exists one and only one transition labelled by a same letter from it.\n     For instance, if we have (1, \"a\", 2) and (1, \"a\", 3), then it isn't deterministic *)\n(* val get_rid_of_unreachable_states : t -> t *)\n(** [get_rid_of_unreachable_states automaton] returns [automaton] without unreachable states *)\n(* val minimize : t -> t *)\n(** [minimize automaton] returns a minimized version of [automaton], the smallest possible \n\n  [automaton] must be a DFA without unreachable states *)\n\n\nval check_word : t -> Stt.Typ.t list -> bool\n(** [check_word automaton word] checks if [word] is recognized by [automaton] *)\n\n\nval to_regex_my : t -> regexp\n(** [to_regex_my automaton] returns the regex representing [automaton] using the McNaughton-Yamada method. \n  The returned value might be unsimplified *)"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":572,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"},"position":{"line":56,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 572, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":573,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"},"range":{"start":{"line":56,"character":28},"end":{"line":56,"character":28}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 573, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":574,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"},"position":{"line":47,"character":89}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 574, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":575,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"},"range":{"start":{"line":47,"character":89},"end":{"line":53,"character":57}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 575, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli","version":1},"contentChanges":[{"text":"type t\n(** The automaton type *)\ntype regexp\n(** The regexp type *)\n\nval empty : t\n(** The empty automaton *)\n\n\nval add_state : t -> int -> t\n(** [add_state automaton state] adds [state] in [automaton]. \n  If it's already a state in [automaton], does nothing *)\nval add_states : t -> int list -> t\n(** [add_states automaton states] adds several states in [automaton] *)\nval add_trans : t -> int -> Stt.Typ.t -> int -> t\n(** [add_trans automaton state1 letter state2] adds a transition labelled [letter] between [state1] and [state2] in [automaton].\n\n  Raises : [state1] and [state2] must be [automaton]'s states.\n  Raises : [l] must be in the [automaton]'s alphabet.\n\n  If the transition is already in [automaton], does nothing *)\nval add_transitions : t -> (int * Stt.Typ.t * int) list -> t\n(** [add_transitions automaton transitions] adds several transitions in [automaton] *)\nval add_start : t -> int -> t\n(** [add_start automaton state] sets [state] as a start state in [automaton].\n  If it's already the case, does nothing\n\n  Raise : [state] must be an [automaton]'s state *)\nval add_starts : t -> int list -> t\n(** [add_starts automaton states] sets several states as start states in [automaton] *)\nval add_end : t -> int -> t\n(** [add_end automaton state] sets [state] as an end state in [automaton].\n  If it's already the case, does nothing\n\n  Raise : [state] must be an [automaton]'s state *)\nval add_ends : t -> int list -> t\n(** [add_ends automaton states] sets several states as end states in [automaton] *)\n\n\nval determinize : t -> t\n(** [determinize automaton] returns an automaton which is the DFA version of [automaton].\n  If [automaton] has n states, the DFA automaton has at most 2^n states.\n\n  A deterministic finite automaton (or DFA) follows these 3 rules :\n  - Has one start state ;\n  - Has no epsilon-transitions ;\n  - For all states, there exists one and only one transition labelled by a same letter from it.\n     For instance, if we have (1, \"a\", 2) and (1, \"a\", 3), then it isn't deterministic *)\n\n\nval check_word : t -> Stt.Typ.t list -> bool\n(** [check_word automaton word] checks if [word] is recognized by [automaton] *)\n\n\nval to_regex_my : t -> regexp\n(** [to_regex_my automaton] returns the regex representing [automaton] using the McNaughton-Yamada method. \n  The returned value might be unsimplified *)"}]}}
Read message 
{"jsonrpc":"2.0","id":576,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"},"position":{"line":47,"character":89}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 576, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":577,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"},"position":{"line":38,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 577, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":578,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"},"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 578, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":579,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml"},"range":{"start":{"line":79,"character":30},"end":{"line":79,"character":30}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 579, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.mli"}}}
Read message 
{"jsonrpc":"2.0","id":580,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":377,"character":0},"end":{"line":377,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 580, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":581,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml"},"range":{"start":{"line":79,"character":30},"end":{"line":79,"character":30}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 581, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":582,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":5,"character":27},"end":{"line":5,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0200271606445ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 582, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":583,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":5,"character":27},"end":{"line":5,"character":27}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 583, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":584,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":5,"character":27},"end":{"line":5,"character":27}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.018835067749ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 584, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":585,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":5,"character":27},"end":{"line":5,"character":27}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 585, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":586,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":57,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 586, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":587,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":57,"character":46},"end":{"line":57,"character":46}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0660419464111ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 587, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":530},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp @@ simp_to_ext r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":588,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":57,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 588, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":589,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":56,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 589, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":590,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":56,"character":45},"end":{"line":57,"character":62}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 590, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":591,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":57,"character":47}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 591, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":592,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":57,"character":47},"end":{"line":57,"character":62}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 592, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":531},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r)\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":593,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":57,"character":47}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 593, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":532},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_simp\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":594,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":57,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 594, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":595,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":5,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 595, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":596,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":5,"character":23},"end":{"line":5,"character":27}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 596, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":535},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ex\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":597,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":5,"character":25}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 597, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":597}}
Read message 
{"jsonrpc":"2.0","id":598,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":5,"character":25}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 598, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":536},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":599,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":5,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 599, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":600,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":290,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 600, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":601,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":290,"character":4},"end":{"line":290,"character":4}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 601, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":602,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":290,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 602, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":603,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":290,"character":12},"end":{"line":290,"character":12}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 603, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":604,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":290,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.06103515625ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 604, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":605,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":289,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 605, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":606,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":289,"character":16},"end":{"line":289,"character":16}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 606, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":537},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.( concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":607,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":290,"character":13},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 607, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":540},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.( @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":608,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":290,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00977516174316ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 608, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":609,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":290,"character":13},"end":{"line":290,"character":13}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 609, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":543},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(sim @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":610,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":290,"character":13}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 610, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":610}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":611,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":290,"character":15}}}
[server] Got a method textDocument/completion
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 611, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":551},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":612,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":290,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 612, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":613,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":290,"character":23},"end":{"line":290,"character":23}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 613, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":614,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":290,"character":23},"end":{"line":290,"character":23}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 614, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":615,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 615, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":616,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":13},"end":{"line":261,"character":13}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 616, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":617,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 617, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":618,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":258,"character":25},"end":{"line":258,"character":25}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 618, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":619,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":257,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 619, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":620,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":257,"character":31},"end":{"line":258,"character":25}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 620, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":552},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":621,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":257,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 621, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":622,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 622, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":623,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":258,"character":13},"end":{"line":261,"character":43}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 623, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":624,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":259,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 624, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":625,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":259,"character":12},"end":{"line":261,"character":43}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 625, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":626,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 626, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":627,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":34},"end":{"line":261,"character":34}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 627, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":628,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 628, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":629,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":33},"end":{"line":261,"character":33}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 629, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":630,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 630, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":631,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":17},"end":{"line":261,"character":32}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 631, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":632,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 632, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":633,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":18},"end":{"line":261,"character":32}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 633, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":634,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":259,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 634, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":635,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":259,"character":12},"end":{"line":261,"character":43}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 635, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":553},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          acc\n        else\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":636,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":259,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 636, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":637,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":260,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 637, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":638,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":260,"character":35},"end":{"line":260,"character":35}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 638, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":639,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":260,"character":36}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 639, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":640,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":260,"character":36},"end":{"line":260,"character":36}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 640, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":554},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          acc\n        else\n          Regexp (pr_regexp ts) :: (acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":641,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":260,"character":36},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 641, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":642,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":260,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 642, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":559},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          acc\n        else\n          Regexp (pr_regexp ts) :: (prçnoacc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":643,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":260,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 643, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":562},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          acc\n        else\n          Regexp (pr_regexp ts) :: (pracc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":644,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":260,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 644, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":564},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          acc\n        else\n          Regexp (pr_regexp ts) :: (acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":645,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":260,"character":36},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 645, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":646,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":260,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 646, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":647,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":259,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 647, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":648,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":259,"character":12},"end":{"line":261,"character":43}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 648, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":576},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":649,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":257,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 649, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":650,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":257,"character":31},"end":{"line":258,"character":25}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 650, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":577},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n      end\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":651,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":255,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 651, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":652,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":255,"character":10},"end":{"line":255,"character":10}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 652, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":653,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":255,"character":10},"end":{"line":255,"character":10}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 653, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":654,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":255,"character":10},"end":{"line":255,"character":10}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 654, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":655,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":255,"character":10},"end":{"line":255,"character":10}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00977516174316ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 655, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":656,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":255,"character":10},"end":{"line":255,"character":10}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 656, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":657,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":255,"character":10},"end":{"line":255,"character":10}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 657, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":658,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":255,"character":10},"end":{"line":255,"character":10}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 658, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":659,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":255,"character":10},"end":{"line":255,"character":10}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 659, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":660,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":266,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 660, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":661,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":266,"character":28},"end":{"line":266,"character":28}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 661, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":662,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 662, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":663,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":251,"character":23},"end":{"line":251,"character":23}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 663, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":664,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":251,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0259876251221ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 664, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":665,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":251,"character":21},"end":{"line":251,"character":21}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 665, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":666,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":266,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 666, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":667,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":266,"character":35},"end":{"line":266,"character":35}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 667, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":668,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":266,"character":28},"end":{"line":266,"character":28}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0269412994385ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 668, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":669,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":266,"character":28},"end":{"line":266,"character":28}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 669, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":670,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 670, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":671,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":252,"character":39},"end":{"line":252,"character":39}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 671, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":672,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":263,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 672, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":673,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":263,"character":38},"end":{"line":264,"character":9}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 673, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":578},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else begin\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":674,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":263,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00286102294922ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 674, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":675,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":247,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0290870666504ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 675, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":676,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":247,"character":10},"end":{"line":247,"character":16}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 676, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":579},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* let tmp = Typ.empty in\n          tmp :: (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":677,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":247,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 677, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":678,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 678, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":679,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":252,"character":31},"end":{"line":252,"character":31}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 679, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":680,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 680, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":681,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":252,"character":34},"end":{"line":252,"character":34}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 681, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":682,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":252,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 682, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":683,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 683, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":684,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":13},"end":{"line":262,"character":17}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 684, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":685,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 685, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":686,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":13},"end":{"line":261,"character":13}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 686, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":580},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* (Typ.diff tp ts) :: acc *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":687,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 687, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":688,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":29},"end":{"line":261,"character":36}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 688, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":582},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* (Typ.diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":689,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 689, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":583},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* Typ.diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":690,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 690, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":594},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc *)\n          acc\n        else\n          (* Somwhere : Typ.diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":691,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 691, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":692,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 692, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":693,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":258,"character":22},"end":{"line":258,"character":22}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 693, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":596},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc () *)\n          acc\n        else\n          (* Somwhere : Typ.diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":694,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":24},"context":{"triggerKind":2,"isRetrigger":false,"triggerCharacter":"("}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 694, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":597},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somwhere : Typ.diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":695,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 695, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":696,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":258,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 696, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":697,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":258,"character":26},"end":{"line":258,"character":26}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 697, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":598},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somwhere : Typ.diff tp ts *)\n          Regexpe (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":698,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":262,"character":17}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 698, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":699,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":262,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 699, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":700,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 700, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":701,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":16},"end":{"line":261,"character":16}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 701, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":599},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somwhere : Typ.diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":702,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 702, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":703,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":16},"end":{"line":261,"character":16}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 703, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":600},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somewhere : Typ.diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":704,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 704, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":705,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":17},"end":{"line":261,"character":17}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 705, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":706,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":17},"end":{"line":261,"character":17}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 706, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","languageId":"ocaml","version":0,"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = (Int, Bool) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, (Char -> Bool)) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = Int\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;Int* ]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":707,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":24,"character":48}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 707, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":708,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":24,"character":48},"end":{"line":24,"character":48}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 708, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":709,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":24,"character":67}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 709, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":710,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":24,"character":67},"end":{"line":24,"character":67}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 710, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":711,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":24,"character":80}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 711, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":712,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":24,"character":67},"end":{"line":24,"character":80}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 712, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":713,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":24,"character":81}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 713, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":714,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":24,"character":67},"end":{"line":24,"character":81}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00977516174316ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 714, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","version":3},"contentChanges":[{"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = (Int, Bool) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, tn) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = Int\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;Int* ]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}]}}
Read message 
{"jsonrpc":"2.0","id":715,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":24,"character":69}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 715, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","version":4},"contentChanges":[{"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = (Int, Bool) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, tno) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = Int\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;Int* ]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}]}}
Read message 
{"jsonrpc":"2.0","id":716,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":24,"character":70}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 716, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","version":10},"contentChanges":[{"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = (Int, Bool) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, tnothing4) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = Int\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;Int* ]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}]}}
Read message 
{"jsonrpc":"2.0","id":717,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":24,"character":76}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 717, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":718,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":24,"character":76},"end":{"line":24,"character":76}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 718, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":719,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":24,"character":76},"end":{"line":24,"character":76}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 719, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":720,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":20,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 720, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":721,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":20,"character":25},"end":{"line":20,"character":34}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 721, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":722,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":22,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 722, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":723,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":22,"character":38},"end":{"line":22,"character":48}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 723, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":724,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":22,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 724, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":725,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":22,"character":37},"end":{"line":22,"character":48}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 725, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","version":12},"contentChanges":[{"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = tnothing3 -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, tnothing4) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = Int\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;Int* ]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}]}}
Read message 
{"jsonrpc":"2.0","id":726,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":22,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 726, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":727,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":14,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 727, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":728,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":14,"character":31},"end":{"line":14,"character":31}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 728, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":729,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":14,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0219345092773ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 729, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":730,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":14,"character":25},"end":{"line":14,"character":34}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 730, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":731,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 731, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":732,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":26,"character":37},"end":{"line":26,"character":40}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 732, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":733,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 733, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","version":14},"contentChanges":[{"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = tnothing3 -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, tnothing4) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = tnothing0\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;Int* ]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}]}}
Read message 
{"jsonrpc":"2.0","id":734,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 734, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","version":15},"contentChanges":[{"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = tnothing3 -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, tnothing4) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = tnothing0 \"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;Int* ]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}]}}
Read message 
{"jsonrpc":"2.0","id":735,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":47}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 735, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","version":16},"contentChanges":[{"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = tnothing3 -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, tnothing4) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = tnothing0 &\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;Int* ]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}]}}
Read message 
{"jsonrpc":"2.0","id":736,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":48}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 736, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":737,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 737, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":738,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":26,"character":43},"end":{"line":26,"character":43}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 738, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","version":17},"contentChanges":[{"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = tnothing3 -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, tnothing4) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = tnothing0 & \"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;Int* ]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}]}}
Read message 
{"jsonrpc":"2.0","id":739,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":49}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 739, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":740,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 740, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","version":18},"contentChanges":[{"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = tnothing3 -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, tnothing4) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = tnothing0 & ~\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;Int* ]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}]}}
Read message 
{"jsonrpc":"2.0","id":741,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":50}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 741, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","version":19},"contentChanges":[{"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = tnothing3 -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, tnothing4) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = tnothing0 & ~N\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;Int* ]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}]}}
Read message 
{"jsonrpc":"2.0","id":742,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":51}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 742, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":743,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":51}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 743, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","version":21},"contentChanges":[{"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = tnothing3 -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, tnothing4) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = tnothing0 & ~B\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;Int* ]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}]}}
Read message 
{"jsonrpc":"2.0","id":744,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":51}}}
[server] Got a method textDocument/completion
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 744, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":744}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":745,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":51}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 745, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","version":24},"contentChanges":[{"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = tnothing3 -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, tnothing4) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = tnothing0 & ~Bool\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;Int* ]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}]}}
Read message 
{"jsonrpc":"2.0","id":746,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 746, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":747,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":54}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 747, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":747}}
Read message 
{"jsonrpc":"2.0","id":748,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":26,"character":54}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 748, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":749,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":26,"character":54},"end":{"line":26,"character":54}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 749, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":750,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":18,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 750, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":751,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":18,"character":33},"end":{"line":18,"character":33}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 751, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":752,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":33,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 752, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":753,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":33,"character":31},"end":{"line":33,"character":31}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 753, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":754,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":31,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 754, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":755,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":31}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 755, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":756,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":45,"character":55}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 756, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":757,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":45,"character":55},"end":{"line":45,"character":60}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 757, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":758,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":45,"character":55}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 758, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","version":26},"contentChanges":[{"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = tnothing3 -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, tnothing4) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = tnothing0 & ~Bool\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;tstar0]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}]}}
Read message 
{"jsonrpc":"2.0","id":759,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":45,"character":61}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 759, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","version":27},"contentChanges":[{"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = tnothing3 -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, tnothing4) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = tnothing0 & ~Bool\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;tstar0 ]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}]}}
Read message 
{"jsonrpc":"2.0","id":760,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":45,"character":62}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 760, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":761,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":45,"character":62}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 761, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":762,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":45,"character":57}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 762, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":763,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":45,"character":57},"end":{"line":45,"character":57}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 763, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":764,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":45,"character":58}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 764, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":765,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":45,"character":58},"end":{"line":45,"character":58}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 765, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":766,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":33,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 766, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":767,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":33,"character":25},"end":{"line":33,"character":31}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 767, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":768,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":40,"character":69}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 768, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":769,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":40,"character":53},"end":{"line":40,"character":69}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 769, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":770,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":47,"character":84}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 770, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":771,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":47,"character":68},"end":{"line":47,"character":84}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 771, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":772,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":47,"character":83}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 772, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":773,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":47,"character":68},"end":{"line":47,"character":83}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 773, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml","version":29},"contentChanges":[{"text":"let env = ref Syntax.Typing.default\n\nlet parse_type (s : string) : Stt.Typ.t =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t, env' = Syntax.Typing.(type_decl !env t_ast) in\n    let () = env := env' in\n    t.Syntax.Typing.typ\n\nlet print (t : Stt.Typ.t) =\n  Printf.printf \"%s\\n\" @@ Format.asprintf \"%a\" Syntax.Pretty.pp t\n\nlet _ = parse_type \"type tnothing0 = Int | Bool\" \n  |> print\nlet _ = parse_type \"type tnothing1 = Int & Bool\"\n  |> print\nlet _ = parse_type \"type tnothing2 = Int -> Bool\"\n  |> print\nlet _ = parse_type \"type tnothing3 = (Int, Bool)\"\n  |> print\nlet _ = parse_type \"type tnothing4 = tnothing3 -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing5 = Int -> Unit -> Char -> (Bool, tnothing4) -> `nil\"\n  |> print\nlet _ = parse_type \"type tnothing6 = tnothing0 & ~Bool\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tstar0 = [ Int* ]\" \n  |> print\nlet _ = parse_type \"type tstar1 = X where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tplus0 = [ Int+ ]\"\n  |> print\nlet _ = parse_type \"type tplus1 = (Int, X) where X = (Int, X) | `nil\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tconcat_star_to_plus0 = [ Int;tstar0 ]\"\n  |> print\nlet _ = parse_type \"type tconcat_star_to_plus1 = (Int, X) where X = tstar1\"\n  |> print\n\nlet () = print_endline \"\"\n\nlet _ = parse_type \"type tfactorize = [ Int;Int;Bool;Int | Int;Int;Int | Int;Int;Bool*;Int;Bool;Int ]\"\n  |> print"}]}}
Read message 
{"jsonrpc":"2.0","id":774,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":47,"character":74}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 774, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":775,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":48,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 775, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":776,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":48,"character":10},"end":{"line":48,"character":10}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 776, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":777,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":12,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 777, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":778,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":12,"character":38},"end":{"line":12,"character":38}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 778, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":779,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"position":{"line":0,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 779, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":780,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"},"range":{"start":{"line":0,"character":24},"end":{"line":0,"character":24}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 780, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":781,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":17},"end":{"line":261,"character":17}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 781, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test.ml"}}}
Read message 
{"jsonrpc":"2.0","id":782,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":17},"end":{"line":261,"character":17}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 782, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":783,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":17},"end":{"line":261,"character":17}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 783, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":784,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 784, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":785,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":26},"end":{"line":261,"character":26}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 785, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":786,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00619888305664ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 786, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":787,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":25},"end":{"line":261,"character":25}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 787, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":602},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somewhere : StTyp.diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":604},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somewhere : Stt.Typ.diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":788,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 788, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":789,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":242,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 789, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":790,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":242,"character":29},"end":{"line":242,"character":29}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 790, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":605},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somewhere : SttTyp.diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":791,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 791, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":608},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = Typ.(cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somewhere : Typ.diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":792,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 792, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":793,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":244,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 793, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":794,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":244,"character":14},"end":{"line":244,"character":20}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 794, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":795,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":244,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 795, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":796,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":244,"character":15},"end":{"line":244,"character":20}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 796, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":609},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = cap t @@ product (node any) (node any)) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somewhere : Typ.diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":797,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":244,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 797, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":610},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = cap t @@ product (node any) (node any) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = Typ.cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somewhere : Typ.diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":798,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":244,"character":53}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 798, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":799,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":256,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 799, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":800,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":256,"character":17},"end":{"line":256,"character":21}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 800, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":611},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = cap t @@ product (node any) (node any) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = cap tp any_star in\n        if Typ.is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somewhere : Typ.diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":801,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":256,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 801, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":612},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = cap t @@ product (node any) (node any) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = cap tp any_star in\n        if is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somewhere : Typ.diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":802,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":257,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 802, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":803,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 803, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":804,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":24},"end":{"line":261,"character":29}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 804, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":805,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 805, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":806,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":25},"end":{"line":261,"character":29}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 806, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":613},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = cap t @@ product (node any) (node any) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = cap tp any_star in\n        if is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somewhere : diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":807,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":261,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 807, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":808,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":25},"end":{"line":261,"character":25}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 808, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":809,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":261,"character":25},"end":{"line":261,"character":25}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 809, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":810,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":247,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 810, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":811,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":247,"character":10},"end":{"line":247,"character":10}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 811, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":614},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = cap t @@ product (node any) (node any) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = cap tp any_star in\n        if is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somewhere : diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":615},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = cap t @@ product (node any) (node any) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let open Typ in\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = cap tp any_star in\n        if is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somewhere : diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","id":812,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":247,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 812, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":813,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":249,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 813, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":814,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":249,"character":25},"end":{"line":249,"character":25}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 814, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":815,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":248,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 815, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":816,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":248,"character":22},"end":{"line":249,"character":25}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 816, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":817,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"position":{"line":248,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 817, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":818,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"},"range":{"start":{"line":248,"character":22},"end":{"line":248,"character":22}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 818, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml","version":616},"contentChanges":[{"text":"open Format\nopen Stt\nmodule Name = Base.Hstring\n\nmodule Regexp = Tmp.Regexp\ntype regexp = Regexp.t_ext\n\ntype t =\n    Printer of (formatter -> unit)\n  | Pair of t * t\n  | Arrow of t * t\n  | Cup of t list (* invariant cup/cap list have length >= 1 *)\n  | Cap of t list\n  | Diff of t * t\n  | Neg of t\n  | Regexp of regexp\n  (*  | Apply of Name.t * t list *)\n  | Rec of t * (Name.t * t) list\n\nmodule Prio : sig\n  type level = private int\n  val level : t -> level\n  val lowest : level\nend =\nstruct\n  type level = int\n  let lowest = 0\n  let level = function\n      Printer _ | Pair _ (* | Apply _ *) -> 10\n    | Neg _-> 9\n    | Cap _ | Diff _ -> 8\n    | Cup _ -> 7\n    | Arrow _ | Regexp _ -> 6\n    | Rec _ -> 5\nend\n\nlet var v = Printer (dprintf \"%a\" Var.pp v)\nlet name v = Printer (dprintf \"%s\" Name.(!!v))\nlet any = Printer (dprintf \"Any\")\nlet empty_ = Printer (dprintf \"Empty\")\n\nlet rec pr ?(assoc=true) parent_level  ppf t =\n  let level = Prio.level t in\n  let do_parens = level < parent_level ||\n                  (level = parent_level && not assoc)\n  in\n  fprintf ppf \"@[\";\n  if do_parens then fprintf ppf \"(\";\n  let () =\n    match t with\n      Printer f -> fprintf ppf \"%t\" f\n    | Pair (t1, t2) -> fprintf ppf \"(%a,@ %a)\" (pr level) t1 (pr level) t2\n    | Arrow (t1, t2) -> fprintf ppf \"%a@ ->@ %a\" (pr ~assoc:false level) t1 (pr level) t2\n    | Cup l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" |\" level) l\n    | Cap l -> fprintf ppf \"@[%a@]\" (pr_list_sep ~sep:\" &\" level) l\n    | Diff (t1, t2) -> fprintf ppf \"%a@ \\\\@ %a\" (pr level) t1 (pr ~assoc:false level) t2\n    | Neg t -> fprintf ppf \"~%a\" (pr level) t\n    | Regexp r -> fprintf ppf \"%s\" @@ Regexp.pp r\n    (*\n    | Apply (n, args) -> fprintf ppf \"%s (@[%a@])\" Name.(!!n) (pr_list_sep ~sep:\",\" Prio.lowest) args\n    *)\n    | Rec (t, defs) -> fprintf ppf \"%a@ where@ @[%a@]\" (pr level) t pr_defs defs\n  in\n  if do_parens then fprintf ppf \")\";\n  fprintf ppf \"@]\"\n\nand pr_list_sep ~sep level ppf l =\n  match l with\n    [] -> assert false\n  | t :: [] -> pr level ppf t\n  | t :: tl -> fprintf ppf \"%a%s@ \" (pr level) t sep;\n    pr_list_sep ~sep level ppf tl\n\nand pr_def ppf (x, t) =\n  fprintf ppf \"@[%s =@ %a@]\" Name.(!!x) (pr Prio.lowest) t\nand pr_defs ppf l =\n  match l with\n    [] -> assert false\n  | d :: [] -> pr_def ppf d\n  | d :: ll -> fprintf ppf \"%a@ and@ \" pr_def d;\n    pr_defs ppf ll\n\nlet is_empty_comp (module M : Typ.Basic) t =\n  Typ.(is_empty (M.set (M.get t) empty))\n\nlet is_any_comp (module M : Typ.Basic) t =\n  let any_comp = M.set (M.get Typ.any) Typ.empty in\n  Typ.(subtype any_comp (M.set (M.get t) empty))\n\nlet choose_complement t =\n  let empty_comps = List.fold_left (fun acc b ->\n      let i =\n        match b with\n          Typ.Basic (module M)\n        | Typ.Constr ((module M), _) ->\n          if is_any_comp (module M) t then 1 else 0\n      in\n      acc + i\n    ) 0 Typ.all_components\n  in\n  empty_comps > Typ.num_components / 2\n\n\nmodule Vars = Base.Common.Pair (Var.Set) (Var.Set)\nmodule VarTable = Hashtbl.Make (Vars)\nmodule DescrTable = Hashtbl.Make (Typ)\nlet group_by_vars t =\n  let open Typ in\n  let var_table = VarTable.create 16 in\n  let get table key = try VarTable.find table key with Not_found -> empty in\n  let replace table key t = VarTable.replace table key t in\n  let update table key t = replace table key (cup t (get table key)) in\n  (* Group according to the DNF *)\n  List.iter (function Basic (module M) | Constr ((module M), _) ->\n      M.get t\n      |> M.dnf\n      |> Seq.iter (fun ((pos, neg), l) ->\n          let key = (Var.Set.of_list pos, Var.Set.of_list neg) in\n          update var_table key (M.set (M.leaf l) empty)\n        )\n    ) all_components;\n  var_table\n\nlet reduce_variables var_table =\n  (* assumes (pos <> neg) *)\n  let vdest = VarTable.create 16 in\n  let empty_key = Var.Set.(empty, empty) in\n  let update_empty t =\n    let s = try VarTable.find vdest empty_key with Not_found -> Typ.empty in\n    VarTable.replace vdest empty_key Typ.(cup t s)\n  in\n  let te = try VarTable.find var_table empty_key with Not_found -> Typ.empty in\n  VarTable.remove var_table empty_key;\n  VarTable.add vdest empty_key te;\n  VarTable.iter (fun ((pos, neg) as key) t1 ->\n      if not (VarTable.mem vdest key) then begin\n        try\n          let t2 = VarTable.find vdest (neg, pos) in\n          let i12 = Typ.cap t1 t2 in\n          if Typ.is_empty i12 then begin\n            VarTable.add vdest key t1;\n            VarTable.add vdest (neg, pos) t2;\n          end else begin\n            update_empty i12;\n            VarTable.add vdest key Typ.(diff t1 i12);\n            VarTable.add vdest (neg, pos) Typ.(diff t2 i12);\n          end\n        with Not_found -> VarTable.add vdest key t1\n      end) var_table;\n  let te = VarTable.find vdest empty_key in\n  if Typ.is_empty te then VarTable.remove vdest empty_key;\n  vdest\n\nlet split_variables t =\n  let table = group_by_vars t in\n  reduce_variables table\n\nlet is_any t = Typ.(subtype any t)\nlet pcap l = match l with\n    [] -> assert false\n  | [ t ] -> t\n  | _ -> Cap l\n\nlet pcup l = match l with\n  | [] -> empty_\n  | [ t ] -> t\n  | _ -> Cup l\n\nlet any_prod = Pair (any, any)\nlet any_arrow = name (Name.cons \"Arrow\")\n\nlet get_leaf (type t) (module M : Typ.Basic with type Leaf.t = t) t =\n  match (M.get t |> M.dnf) () with\n    Seq.Nil -> M.Leaf.empty\n  | Seq.Cons((([], []), l), _ ) -> l\n  | _ -> assert false\n\nlet pbasic (module M : Typ.Basic) t acc =\n  let l = get_leaf (module M) t in\n  if M.Leaf.is_empty l then acc else (Printer (fun ppf -> M.Leaf.pp ppf l))::acc\n\nlet rec_names = Array.map Name.cons [|\"X\"; \"Y\"; \"Z\"; \"T\"; \"U\"; \"V\"; \"W\"|]\nlet decompile t =\n  let memo = DescrTable.create 16 in\n  let name_id = ref 0 in\n  let get_name () =\n    let i = !name_id in\n    incr name_id;\n    let len = Array.length rec_names in\n    if i >= len then Name.cons (\"X\" ^ (string_of_int (i-len)))\n    else rec_names.(i)\n  in\n  let rec pr_descr t =\n    match DescrTable.find memo t with\n    | Some (_, _, pname) -> pname\n    | None ->\n      let n = get_name () in\n      let pname = name n in\n      DescrTable.replace memo t (Some (n, empty_, pname));\n      pname\n    | exception Not_found ->\n      DescrTable.add memo t None;\n      let var_table = split_variables t in\n      let acc, has_others  =\n        match VarTable.find_opt var_table Var.Set.(empty, empty) with\n          Some t -> if is_any t then [any], false else\n            begin\n              VarTable.remove var_table Var.Set.(empty, empty);\n              [ pr_choose_compl t ], true\n            end\n        | None -> [], true\n      in\n      let acc = if not has_others then acc else\n          VarTable.fold (fun (vpos, vneg) t acc ->\n              if Typ.is_empty t then acc else\n                let tacc = Var.Set.fold (fun v acc -> (var v) :: acc) vpos [] in\n                let tacc = Var.Set.fold (fun v acc -> (Neg (var v)) :: acc) vneg tacc in\n                let tacc = if is_any t then tacc else (pr_choose_compl t) :: tacc in\n                (pcap (List.rev tacc)) :: acc)\n            var_table acc\n      in\n      let res = pcup acc in\n      match DescrTable.find memo t with\n        None -> DescrTable.remove memo t; res\n      | Some (n, _, pname) ->\n        DescrTable.replace memo t (Some (n, res, pname)); res\n  and pr_node n = pr_descr (Typ.descr n)\n  and pr_choose_compl t =\n    let do_complement = choose_complement t in\n    let t = if do_complement then Typ.neg t else t in\n    let res = pr_no_var t in\n    match res, do_complement with\n      [], false -> empty_\n    | [], true -> any\n    | l, false -> pcup l\n    | l, true -> Diff (any, pcup l)\n  and pr_no_var t =\n    let open Typ in\n    let acc = [] in\n    let acc = pbasic (module VarEnum) t acc in\n    let acc = pbasic (module VarInt) t acc in\n    let acc = pbasic (module VarChar) t acc in\n    let acc = pbasic (module VarUnit) t acc in\n    let acc =\n      let tp = cap t @@ product (node any) (node any) in\n      if Typ.(is_any tp || is_empty tp) then\n        acc\n      else\n        let any_star =\n          let x = make () in\n          let p = product (node any) x in\n          let c = cup Builtins.nil p in\n          let () = def x c in\n          c\n        in\n        let ts = cap tp any_star in\n        if is_empty ts then\n          (* tp :: acc (?) *)\n          acc\n        else\n          (* Somewhere : diff tp ts *)\n          Regexp (pr_regexp ts) :: acc\n    in\n    let acc = pr_constr (module VarProduct : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_prod pr_product_line t acc\n    in\n    let acc = pr_constr (module VarArrow : Basic with type Leaf.t = Product.t)\n        (module Product : Base.Sigs.Bdd with type t = Product.t\n                                         and type atom = Product.atom\n                                         and type Leaf.t = Product.Leaf.t)\n        any_arrow pr_arrow_line t acc\n    in\n    acc\n  and pr_regexp t =\n    (* \n\n      - Need to use pr_descr (why?)\n      - Be aware of variables (how to get rid of/ignore them?)\n\n      Need to rethink about the algo \n\n    *)\n\n    (* Place holder *)\n    Regexp.(simp_to_ext @@ concat (letter Stt.Typ.any) (letter t))\n  and pr_constr (type t a l)\n      (module V : Typ.Basic with type Leaf.t = t)\n      (module C : Base.Sigs.Bdd with type t = t and type atom = a and type Leaf.t = l)\n      any pr_line t acc =\n    if is_empty_comp (module V) t then acc\n    else if is_any_comp (module V) t then any :: acc\n    else\n      (*let () = Format.eprintf \"Going to ARROW LINE CAUSE: %a is not empty\\n%!\" \n      Typ.pp (V.set (V.get t) Typ.empty) in*)\n      let dnf = get_leaf (module V) t in\n      C.dnf dnf\n      |> Seq.fold_left pr_line acc\n  and pr_product_line acc ((posp, negp), _) =\n    let posp =\n      let open Typ in\n      match posp with\n        [] -> None\n      | [ (n1, n2)] -> Some (Pair(pr_node n1, pr_node n2))\n      | ( n1, n2) :: ll ->\n        let n1, n2 = List.fold_left (fun (t1, t2) (n1, n2) ->\n            (cap t1 (descr n1), cap t2 (descr n2))) (descr n1, descr n2) ll\n        in  Some ( Pair (pr_descr n1, pr_descr n2))\n    in\n    let negp = List.map (fun (n1, n2) -> Pair (pr_node n1, pr_node n2)) negp in\n    let posp = match posp with None ->Pair (any, any) | Some l -> l in\n    let res = match negp with\n        [] -> posp\n      | l -> Diff(posp, pcup l)\n    in res :: acc\n  and pr_arrow_line acc ((posa, nega),_) =\n    (*Format.eprintf \"IN ARROW LINE\\n%!\"; *)\n    let arrow (n1, n2) = Arrow (pr_node n1, pr_node n2) in\n    let posa = List.map arrow posa in\n    let nega = List.map arrow nega in\n    let posa = match posa with [] -> any_arrow | l -> pcap l in\n    let res = match nega with\n        [] -> posa\n      | l -> Diff(posa, pcup l)\n    in\n    res :: acc\n  in\n  let res = pr_descr t in\n  let recs = DescrTable.fold (fun _ x acc ->\n      match x with\n        None -> acc\n      | Some (n, d, _) -> (n, d)::acc\n    ) memo []\n  in\n  match recs with\n    [] -> res\n  | _ -> Rec(res, recs)\n\nlet global_print_table = DescrTable.create 16\n\nlet pp fmt t =\n  let d = try DescrTable.find global_print_table t with\n      Not_found ->\n      let d = decompile t in\n      DescrTable.add global_print_table t d;\n      d\n  in\n  pr Prio.lowest fmt d"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/pretty.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml","languageId":"ocaml","version":0,"text":"let parse_type env s =\n  let lexbuf = Sedlexing.Utf8.from_string s in\n  match Syntax.Parser.typ_decl lexbuf with\n    Error msg -> Format.eprintf \"ERROR: %s@\\n\" msg; exit 1\n  | Ok (_, t_ast) ->\n    let t,env' = Syntax.Typing.(type_decl env t_ast) in\n    t.Syntax.Typing.typ, env'\n\nopen Stt\nmodule Normal = Base.Cartesian.Make (Typ) (Typ)\nlet extract (n1, n2) = Typ.descr n1, Typ.descr n2\n\nlet any_star =\n  let open Typ in\n  let x = make () in\n  let p = product (node any) x in\n  let c = cup Builtins.nil p in\n  let () = def x c in\n  c\n\nlet format_auto fmt t =\n  let open Format in\n  let state = let s = ref ~-1 in\n    fun () -> incr s; !s in\n  let init = state () in\n  let finals = ref [] in\n  let states = ref [(t, init)] in\n  let trans = ref [] in\n  let rec loop t q =\n    if Typ.subtype Builtins.nil t then finals := q :: !finals;\n    states := (t, q) :: !states;\n    let prod = Typ.VarProduct.(full_dnf (get t))\n               |> Seq.map snd\n               |> Seq.map (fun (pl, nl) ->\n                   (List.map extract pl,\n                    List.map extract nl)\n                 )\n    in\n    let norm = Normal.normal prod in\n    let todo = \n      norm |>\n      List.fold_left (fun acc (t1, t2) ->\n          let q', acc = match List.find_opt (fun (t', _) -> Typ.equiv t2 t') (!states@acc) with\n              None -> let q = state () in q, (t2,q)::acc\n            | Some (_, q') -> q', acc\n          in\n          let l1 = \n            let s = asprintf \"%a\" Syntax.Pretty.pp t1 in\n            String.split_on_char '|' s\n            |> List.map String.trim\n          in\n          List.iter (fun s -> trans := (q, s, q') :: !trans) l1;\n          acc\n        ) []\n    in\n    List.iter (fun (t,q) -> loop t q) todo\n  in\n  let () = loop t init in\n  fprintf fmt \"%d@\\n\" (state());\n  pp_print_list ~pp_sep:(fun fmt () -> Format.pp_print_string fmt \",\")\n    pp_print_int\n    fmt  !finals;\n  fprintf fmt \"@\\n\";\n  List.iter (fun (q, s, q') ->\n      fprintf fmt \"%d,%s,%d@\\n\" q s q') (List.sort compare !trans)\n\n\n\nlet dump_auto env path s =\n  let t, env' = parse_type env s in\n  if not (Typ.subtype t any_star) then\n    Format.eprintf \"Ignoring %s, which is not a subtype of [Any*]@\\n\" s\n  else begin\n    let c_out = open_out_bin path in\n    let fmt = Format.formatter_of_out_channel c_out in\n    Format.fprintf fmt \"%s@\\n\" s;\n    format_auto fmt t;\n    Format.pp_print_flush fmt ();\n    close_out c_out;\n  end;\n  env'\n\n(*\nSyntax of types:\ntype t = [ regexp1 ] | [ regexp2 ] | ...\n\nSyntax of regexps = \n- symbols can be:\n    - Int, Bool\n    - variants: `A, `B, `foo, (like OCaml's polymorphic variants). Note: Bool ≡ `false | `true\n    - any previously defined type\n\n- Union |, concaténation ;\n- *, +, ?\nou expression entièrement vide\n\n*)\nlet main () =\n  let l = [ \n    \"type t0 = [ `A;`B;`C ]\";\n    \"type t1 = [ Int*; Int ]\";\n    \"type t2 = [ (Int|Bool)*; Int ]\";\n    \"type t3 = [ Bool;Bool+ ]\";\n    \"type t4 = [ ((`A|`B); Int)+ ]\";\n    \"type t5 = t0 | [ Bool ]\";\n    \"type t6 = t0 | []\";\n    \"type t7 = []\";\n    \"type t8 = [ ((`A|`B)*; `A*;`C)+ ]\";\n\n    ]\n  in\n  List.fold_left (fun (i, env) s ->\n      let path = Format.sprintf \"test/auto%03d.txt\" i in\n      let env' = dump_auto env path s in\n      (i+1, env')\n    ) (0, Syntax.Typing.default) l\n  |> ignore\n\n\nlet () = main ()"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":819,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":33,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 819, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":820,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":33,"character":5},"end":{"line":33,"character":5}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 820, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":821,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":34,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 821, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":822,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":4}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 822, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":823,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":51,"character":2}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 823, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":824,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":51,"character":2},"end":{"line":51,"character":2}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 824, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":825,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":57,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 825, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":826,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":57,"character":3},"end":{"line":57,"character":3}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 826, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":827,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":58,"character":2}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 827, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":828,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":58,"character":2},"end":{"line":58,"character":2}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 828, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":829,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":60,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 829, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":830,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":60,"character":1},"end":{"line":60,"character":1}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 830, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":831,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":46,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 831, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":832,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":46,"character":19},"end":{"line":47,"character":50}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 832, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":833,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":47,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 833, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":834,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":47,"character":35},"end":{"line":47,"character":50}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 834, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":835,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":48,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 835, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":836,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":48,"character":38},"end":{"line":48,"character":38}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 836, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":837,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":48,"character":38},"end":{"line":48,"character":38}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0147819519043ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 837, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":838,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":48,"character":38},"end":{"line":48,"character":38}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00977516174316ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 838, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":839,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":48,"character":38},"end":{"line":48,"character":38}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 839, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":840,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":48,"character":38},"end":{"line":48,"character":38}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 840, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":841,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":29,"character":36}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 841, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":842,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":29,"character":36},"end":{"line":29,"character":36}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 842, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":843,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":29,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 843, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":844,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":48,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 844, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":845,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":48,"character":13},"end":{"line":48,"character":13}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 845, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":846,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":49,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 846, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":847,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":49,"character":11},"end":{"line":49,"character":11}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 847, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":848,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"position":{"line":49,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 848, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":849,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":29,"character":36},"end":{"line":29,"character":36}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 849, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":850,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":29,"character":36},"end":{"line":29,"character":36}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 850, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":851,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":29,"character":36},"end":{"line":29,"character":36}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 851, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":852,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":377,"character":0},"end":{"line":377,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 852, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":853,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":377,"character":0},"end":{"line":377,"character":0}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 853, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":854,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml"},"range":{"start":{"line":79,"character":30},"end":{"line":79,"character":30}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 854, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":855,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml"},"range":{"start":{"line":79,"character":30},"end":{"line":79,"character":30}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 855, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":856,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":377,"character":0},"end":{"line":377,"character":0}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 856, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":857,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":29,"character":36},"end":{"line":29,"character":36}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.149965286255ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 857, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"}}}
Read message 
{"jsonrpc":"2.0","id":858,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/regexp.ml"},"range":{"start":{"line":79,"character":30},"end":{"line":79,"character":30}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 858, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":859,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/test/auto_printer.ml"},"range":{"start":{"line":29,"character":36},"end":{"line":29,"character":36}},"context":{"diagnostics":[],"triggerKind":2}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/test
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/test
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 859, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/test/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml","languageId":"ocaml","version":0,"text":"type state = int\nmodule StateSet = Set.Make(Int)\ntype states = StateSet.t\n\ntype trans = state * Stt.Typ.t * state\nmodule Trans = struct\n\n  type t = trans\n\n  let compare (state1, letter, state2 : t) \n              (state1', letter', state2' : t) : int =\n    let c1 = compare state1 state1' in\n    match c1 with\n    | 0 ->\n      begin\n        let c2 = Stt.Typ.compare letter letter' in\n        match c2 with\n        | 0 -> compare state2 state2'\n        | _ -> c2\n      end\n    | _ -> c1\n\nend\nmodule TransSet = Set.Make(Trans)\ntype transitions = TransSet.t\n\ntype t = { \n            states : states ; \n            starts : states ; \n            trans : transitions ; \n            ends : states ;\n         }\n\n\n\ntype regexp = Regexp.t_simp\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\nlet _get_transition_from (trans : transitions) \n                        (state : state) : transitions =\n  TransSet.filter (\n    fun (state', _, _) -> \n      state = state'\n  ) \n  trans\n\nlet get_transition_between (trans : transitions) \n                           (state1 : state)\n                           (state2 : state) : transitions =\n  TransSet.filter (\n      fun (state1', _, state2') -> \n        state1 = state1'\n        && state2 = state2'\n    ) \n    trans\n\n(* ================================================================= *)\n(* ================================================================= *)\n(* ================================================================= *)\n\n\nlet empty : t = { \n                  states = StateSet.empty ; \n                  starts = StateSet.empty ; \n                  trans = TransSet.empty ;\n                  ends = StateSet.empty ; \n                }\n\n\n\nlet add_state (automaton : t) \n              (state : state) : t =\n  { automaton with states = StateSet.add state automaton.states }\n\nlet add_states (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t ->\n      add_state acc state\n  ) \n  automaton states\n\nlet add_trans (automaton : t) \n              (state1 : state) \n              (letter : Stt.Typ.t)\n              (state2 : state) : t =\n  if StateSet.mem state1 automaton.states && StateSet.mem state2 automaton.states then\n    { automaton with trans = TransSet.add (state1, letter, state2) automaton.trans }\n  else\n    failwith \"both given states must be automaton's states\"\n\nlet add_transitions (automaton : t) \n                    (transitions : trans list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state1, letter, state2 : trans) : t -> \n      add_trans acc state1 letter state2\n  ) \n  automaton transitions\n\nlet add_start (automaton : t) \n              (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with starts = StateSet.add state automaton.starts }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_starts (automaton : t) \n               (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_start acc state\n  ) \n  automaton states\n\nlet add_end (automaton : t) \n            (state : state) : t =\n  match StateSet.find_opt state automaton.states with\n  | Some _ ->\n    { automaton with ends = StateSet.add state automaton.ends }\n  | None -> failwith \"given state must be an automaton's state\"\n\nlet add_ends (automaton : t) \n             (states : state list) : t =\n  List.fold_left (\n    fun (acc : t) \n        (state : state) : t -> \n      add_end acc state\n  ) \n  automaton states\n\n\n\nlet determinize (automaton : t) : t = automaton\n(*\nlet determinize (automaton : t) : t =\n\n  module StateSetSet = Set.Make(StateSet)\n  type states_set = StateSetSet.t\n  module StateSetHash = struct\n\n    type t = states\n\n    let equal : states -> states -> bool = StateSet.equal\n\n    let hash (states : t) : int =\n      StateSet.fold (\n        fun (state : state) \n            (acc : int) : int ->\n          Hashtbl.hash @@ state lxor acc\n      ) \n      states 0\n     \n  end\n  module StateSetHashtbl = Hashtbl.Make(StateSetHash)\n\n  (* Only one start state (state nb = min-1)*)\n  let start_state = -1 + StateSet.fold min automaton.states 0\n  in\n  (* Add it as a new state *)\n  let automaton = add_state automaton start_state in\n  (* Link the new start state with previous start states *)\n  let automaton = StateSet.fold (\n    fun (state : state)\n        (automaton : t) : t ->\n      add_trans automaton start_state Stt.Typ.empty state\n  ) \n  automaton.starts automaton \n  in\n  (* Removes old start states *)\n  let automaton = { automaton with starts = StateSet.empty } in\n  (* Add new start state *)\n  let automaton = add_start automaton start_state \n  in\n  (* To get rid of eps transitions\n    \n     Hashtbl mapping all states the set of states accessible with eps transitions :\n     (state, StateSet.t) Hashtbl.t\n   *)\n  let eps_closure = Hashtbl.create 16 in\n  let () = StateSet.iter (\n    fun state ->\n      let rec get_accessible_states_with_eps_trans (state1 : state) \n                                                   (acc, already_done : states * states) : states =\n        (* all transitions *)\n        let transitions = get_transition_from automaton.trans state1 in\n        (* keep only the eps transitions *)\n        let transitions = TransSet.filter (\n          fun (_, letter, _ : trans) : bool -> \n            Stt.Typ.is_empty letter\n        ) \n        transitions \n        in\n        if TransSet.is_empty transitions then\n          acc\n        else\n          let states = TransSet.fold (\n            fun (_, _, state2 : trans) \n                (acc : states) : states -> \n              StateSet.add state2 acc\n          ) \n          transitions StateSet.empty \n          in\n          StateSet.fold (\n            fun (state2 : state)\n                (acc : states) : states ->\n              (* next state already done *)\n              if StateSet.mem state2 already_done then\n                acc\n              (* we call on each next state [state2] and we add all his eps neighbours to [state1]'s ones*)\n              else\n                StateSet.union acc\n                  @@ StateSet.add state2\n                  @@ get_accessible_states_with_eps_trans state2\n                  @@ (StateSet.empty, StateSet.add state1 already_done)\n          ) \n          states StateSet.empty\n      in\n      (* eps_closure is a map from a state to a StateSet (the set of all the accessible states with eps transitions) *)\n      Hashtbl.replace eps_closure state \n        @@ StateSet.add state\n        @@ get_accessible_states_with_eps_trans state \n        @@ (StateSet.empty, StateSet.empty)\n  ) \n  automaton.states\n  in\n  (* Merging states \n    \n     Hashtbl mapping a set of states to a list of all its transitions from every states in the set\n     (states, (Stt.Typ.t * states) list) Hashtbl.t\n\n     expl : {1, 2, 5} -> [ (\"a\", {1}) ; (\"b\", {1, 2, 5}) ; (\"c\", {}) ; (\"d\", {3, 4}) ], i.e. :\n      - From states 1, 2 and 5, with \"a\", we can get to 1\n      - From states 1, 2 and 5, with \"b\", we can get to 1, 2 or 5 so we add it as a future new state\n      - etc.\n  *)\n  let new_trans = StateSetHashtbl.create 16 in\n  (* Starting with the StateSets of the start_state (stack) *)\n  let states_to_do = StateSetSet.add (Hashtbl.find eps_closure start_state) StateSetSet.empty in\n  let rec merge_transitions (states_to_do : states_set) \n                            (states_done : states_set) : unit =\n    if not @@ StateSetSet.is_empty states_to_do then\n      let choosen_states = StateSetSet.choose states_to_do in\n      let states_to_do = StateSetSet.remove choosen_states states_to_do \n      in\n      (* i_transitions : (Stt.Typ.t * states) list \n          = list of all possible next states\n        \n         n_to_do : states_set \n          = sett of all states we need to apply the algorithm\n      *)\n      let i_transitions, n_to_do = LetterSet.fold (\n        (* For all letter *)\n        fun (letter : Stt.Typ.t)\n            (i_transitions, stack : (Stt.Typ.t * states) list * states_set) \n              : ((Stt.Typ.t * states) list * states_set) ->\n          (* For all states in states, we gather all the next states the accesible states with a transitions labelled letter *)\n          let next_states = StateSet.fold (\n            fun state1 acc ->\n              (* Get all transitions *)\n              let transitions = get_transition_from automaton.trans state1 in\n              (* All transitions labelled [letter] *)\n              let transitions = TransSet.filter (\n                fun (_, letter', _ : trans) : bool -> \n                  Stt.Typ.compare letter' letter = 0\n              ) \n              transitions \n              in\n              (* Sets of all possible next states *)\n              let next_states = TransSet.fold (\n                fun (_, _, state2 : trans)\n                    (acc : states) : states ->\n                  StateSet.union acc @@ Hashtbl.find eps_closure state2\n              )\n              transitions StateSet.empty \n              in\n              (* We join with the other accesible states *) \n              StateSet.union acc next_states\n          ) \n          choosen_states StateSet.empty \n          in\n          let n_stack =\n            (* We don't apply the function if\n                - there aren't any transitions\n                - or we already did the job\n                - or it's a loop\n             *)\n            if StateSet.is_empty next_states || StateSetSet.mem next_states states_done || StateSet.compare next_states choosen_states = 0 then\n              stack\n            else\n              StateSetSet.add next_states stack\n          in\n          (* We add the transitions labelled [letter] from [choosen_states] to [next_states], \n             and we also return the new to_do_stack *)\n          (letter, next_states) :: i_transitions, n_stack\n      ) \n      automaton.alphabet ([], states_to_do) \n      in\n      let () = StateSetHashtbl.replace new_trans choosen_states i_transitions in\n      (* We keep_going the algo with the StateSet in the to_do list, and we add the current states to the done list since we just applied the algo to it*)\n      merge_transitions n_to_do @@ StateSetSet.add choosen_states states_done\n  in\n  let () = merge_transitions states_to_do StateSetSet.empty in\n  (* Renaming StateSet into a state \n     This is all the new states\n  *)\n  let states_name = StateSetHashtbl.create 16 in\n  let state_nb = ref 0 in\n  let () = StateSetHashtbl.iter (\n    fun (states : states) \n        (_ : (Stt.Typ.t * states) list) : unit -> \n      StateSetHashtbl.replace states_name states !state_nb ;\n      (* Small counter *)\n      state_nb := !state_nb + 1\n  ) \n  new_trans \n  in\n  (* Gather all new transitions *)\n  let transitions = StateSetHashtbl.fold (\n    fun (state : states)\n        (i_transitions : (Stt.Typ.t * states) list) \n        (acc : transitions) ->\n      (* Int name ([state] is a set)*)\n      let state1 = StateSetHashtbl.find states_name state in\n      (* Add to the acc the new transitions *)\n      let transitions = List.fold_left (\n        fun (acc' : transitions) \n            (letter, states : Stt.Typ.t * states) : transitions ->\n          (* Transitions *)\n          if StateSet.is_empty states then\n            acc'\n          else\n            let trans = (state1, letter, StateSetHashtbl.find states_name states) in\n            TransSet.add trans acc'\n      ) \n      TransSet.empty i_transitions\n      in \n      TransSet.union acc transitions\n  )\n  new_trans TransSet.empty \n  in\n  (* Gather all end states *)\n  let end_states = StateSetHashtbl.fold (\n    fun (states : states) \n        (state_name : state) \n        (acc : states) : states ->\n      (* If one of the state in states (which is a StateSet) is an end state, then the state name of states is an end state *)\n     if StateSet.exists (fun (state : state) : bool -> StateSet.mem state states) automaton.ends then\n        StateSet.add state_name acc\n      else\n        acc\n  ) \n  states_name StateSet.empty\n  in\n  (* The DFA automaton *)\n  { \n    (* Same alphabet *)\n    alphabet = automaton.alphabet ; \n    (* Get all new states *)\n    states = StateSet.of_seq @@ StateSetHashtbl.to_seq_values states_name ;\n    (* Get the name of the state from its \"set name\" *)\n    starts = StateSet.add (StateSetHashtbl.find states_name @@ Hashtbl.find eps_closure start_state) StateSet.empty ; \n    (* Previously calculated transitions *)\n    trans = transitions ;\n    (* Previously calculated end states *)\n    ends = end_states ; \n  }\n\nTODO : Fix algo bc we don't know all the possible letters (types)\n\n*)\n\n\nlet check_word (automaton : t) \n               (word : Stt.Typ.t list) : bool =\n  let end_states =\n    List.fold_left\n    (\n      fun (current_states : states) \n          (letter : Stt.Typ.t) : states ->\n        StateSet.fold\n        (\n          fun (s : state)\n              (next_states : states) : states ->\n            let next_states_for_s = TransSet.fold\n              (\n                fun (s1, l, s2 : trans)\n                    (next_states_labeled_letter : states) : states ->\n                  if s = s1 && Stt.Typ.compare letter l = 0 then\n                    StateSet.add s2 next_states_labeled_letter\n                  else\n                    next_states_labeled_letter\n              )\n              automaton.trans StateSet.empty\n            in\n            StateSet.union next_states next_states_for_s\n        )\n        current_states StateSet.empty \n    )\n    automaton.starts word\n  in\n  StateSet.exists (Fun.flip StateSet.mem @@ automaton.ends) end_states\n\n\n\nlet to_regex_my (automaton: t) : regexp =\n  (* States renaming *)\n  let hash = Hashtbl.create 16 in\n  let i = ref 1 in\n  let () = StateSet.iter (\n    fun (s : state) : unit ->\n      Hashtbl.add hash s !i ;\n      incr i \n  )\n  automaton.states\n  in\n  let replace_states (states : states) : states =\n    StateSet.map (\n      fun (s : state) : state ->\n        Hashtbl.find hash s\n    )\n    states\n  in\n  let states = replace_states automaton.states in\n  let starts = replace_states automaton.starts in\n  let ends = replace_states automaton.ends in\n  let trans = TransSet.map (\n    fun (s1, l, s2 : trans) : trans ->\n      (Hashtbl.find hash s1, l, Hashtbl.find hash s2)\n  )\n  automaton.trans\n  in\n  let automaton = { states ; starts ; ends ; trans } in\n  (* McNaughton-Yamada algorithm *)\n  let n = StateSet.cardinal automaton.states in\n  let mat1 = Array.init n (\n    fun (i : state) : regexp array ->\n      let line = Array.make n Regexp.empty in\n      let () = Array.mapi_inplace (\n        fun (j : state) \n            (_ : regexp) : regexp ->\n          let transitions = get_transition_between automaton.trans (i+1) (j+1) in\n          let regex = TransSet.fold (\n            fun (_, l, _ : trans)\n                (acc : regexp) : regexp ->\n              Regexp.(\n                if is_empty acc then\n                  letter l\n                else\n                  union acc @@ letter l\n              )\n          )\n          transitions Regexp.empty\n          in\n          if TransSet.is_empty transitions then\n            if i == j then\n              Regexp.letter Stt.Typ.empty\n            else\n              regex\n          else\n            if i == j && not @@ TransSet.mem (i, Stt.Typ.empty, j) transitions then\n              Regexp.(union regex @@ letter Stt.Typ.empty)\n            else\n              regex\n      ) \n      line \n      in\n      line\n  )\n  in\n  let mat2 = Array.make_matrix n n Regexp.empty in\n  let choose_mat = ref true in\n  let () =\n    for k = 0 to n-1 do\n      for p = 0 to n-1 do\n        for q = 0 to n-1 do\n          let algo (mat : regexp array array)\n                   (mat' : regexp array array) : unit =\n            mat'.(p).(q) <-\n              if Regexp.is_empty mat.(p).(k) || Regexp.is_empty mat.(k).(q) then\n                mat.(p).(q)\n              else if Regexp.is_empty mat.(p).(q) then\n                if Regexp.is_empty mat.(k).(k) then\n                  Regexp.letter Stt.Typ.empty\n                else\n                  Regexp.(\n                       concat mat.(p).(k) \n                    @@ concat (star mat.(k).(k)) mat.(k).(q)\n                  )\n              else if k = p then\n                Regexp.(concat (star mat.(p).(p)) mat.(p).(q))\n              else if k = q then\n                Regexp.(\n                     concat mat.(p).(q)\n                  @@ star mat.(q).(q)\n                )\n              else\n                Regexp.(\n                     union mat.(p).(q) \n                  @@ concat mat.(p).(k) \n                  @@ concat (star mat.(k).(k)) mat.(k).(q)\n                )\n          in\n          (* instead of doing copies, i read and write alternately in two matrixes *)\n          if !choose_mat then\n            algo mat1 mat2\n          else\n            algo mat2 mat1\n        done\n      done ;\n      choose_mat := not !choose_mat\n    done\n  in\n  StateSet.fold (\n    fun (start_state : state)\n        (acc : regexp) : regexp ->\n      StateSet.fold (\n        fun (end_state : state)\n            (acc' : regexp) : regexp ->\n          if Regexp.is_empty acc' then\n            if start_state = end_state then\n              Regexp.(\n                  union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              if !choose_mat then \n                mat1.(start_state-1).(end_state-1) \n              else \n                mat2.(start_state-1).(end_state-1)\n          else\n            if start_state = end_state then\n              Regexp.(\n                   union acc' \n                @@ union (letter Stt.Typ.empty) (\n                  if !choose_mat then \n                    mat1.(start_state-1).(end_state-1) \n                  else \n                    mat2.(start_state-1).(end_state-1)\n                )\n              )\n            else\n              Regexp.union acc' (\n                if !choose_mat then \n                  mat1.(start_state-1).(end_state-1) \n                else \n                  mat2.(start_state-1).(end_state-1)\n              )\n      )\n      automaton.ends acc\n  )\n  automaton.starts Regexp.empty"}}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":860,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/p9romain/rp/cours/Stage/stt/syntax/tmp/automaton.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[],"triggerKind":1,"only":["refactor","source"]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Found a `dune` file at /home/p9romain/rp/cours/Stage/stt/syntax
]] Making a new jbuilder package at /home/p9romain/rp/cours/Stage/stt/syntax
=== Project root: /home/p9romain/rp/cours/Stage/stt
Detected `opam` dependency manager for local use
Sending response {"id": 860, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/p9romain/rp/cours/Stage/stt/syntax/.merlin"}}
